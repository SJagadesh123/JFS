jQuery
======
>  jQuery is a small, fast and lightweight JavaScript library.

>  to simplify the HTML DOM Tree

>  jQuery is platform-independent.

>  jQuery means "write less do more".

>  jQuery was originally created in January 2006 at BarCamp NYC by John Resig

The purpose of jQuery is to make it much easier to use JavaScript on your website.

jQuery takes a lot of common tasks that require many lines of JavaScript code to accomplish, and wraps them into methods that you can call with a single line of code.

jQuery also simplifies a lot of the complicated things from JavaScript, like AJAX calls and DOM manipulation.


jQuery Features
---------------
> HTML/ DOM manipulation

> HTML event methods

> CSS manipulations

> Effects and Animations

> AJAX

> JSON Parsing

> Extensibility through plugins

> Cross Browser Support

etc

jQuery History
--------------
jQuery was first released in January 2006 by John Resig at BarCamp NYC. It is currently headed by Timmy Wilson and maintained by a team of developers. 

jQuery Release Versions

1.0	26,August,2006 (initial release)
2.0	18, April, 2013
2.2	January 8, 2016	2.2.4 (May 20, 2016)
3.0	June 9, 2016	3.0.0 (June 9, 2016)
3.5 	April 10, 2020   
3.5.1   May 4, 2020
3.6.0   March 2, 2021


How to install jQuery ?
-----------------------
jquery.com

1) Download jQuery library from - http://jquery.com/download/  
 > Right click on the link > Save as..

Download the compressed, production jQuery  - jquery-3.5.1.min.js
	OR
Download the uncompressed, development jQuery - jquery-3.5.1.min.js

2) Place the  downloaded JS file in the web application directory


How to use jQuery library?
--------------------------
We need to include jQuery library in our HTML file as follows:

<html>
<head>
<script type="text/javascript" src="jquery-3.5.1.min.js"></script>
	OR  
Using CDN - Content Delivery Network
<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

<script type="text/javascript">
   // write the java script code here 
</script>   
</head>
<body>
........
</body>
</html>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>



jQuery Syntax
-------------
The jQuery syntax is tailor made for selecting HTML elements and perform some action on the element(s).

Basic syntax is: 
	$(selector).action()

A dollar sign to define jQuery

A (selector) to "query (or find)" HTML elements

A jQuery action() to be performed on the element(s)



All jQuery methods are inside a document.ready() function:

$(document).ready(function()
{
   // jQuery functions go here...
});

This is to prevent any jQuery code from running before the document is finished loading (is ready). 

In place of $(document).ready(), we can use shorthand notation $() also

    $(document).ready(function() {  
         $("p").css("color", "red");  
    });  

The above code is equivalent to the following

    $(function() {  
         $("p").css("color", "red");  
    });  

-----------------------------
How to identify an Element
1) Tag Selection
CSS - <h1>  - h1{ //styles }
Java Script - <h1> - document.querySelector('h1')
jQuery - <h1> - $('h1')

2) ID Selection
<h1 id="head1">
CSS - #head1{ styles}
Java Script - document.querySelector("#head1") (or) document.getElementById('head1')
jQuery - $('#head1')

3) Class Selector
<h1 class="mystyle">
CSS - .mystyle{ styles}
Java Script - document.querySelector(".mystyle") (or) document.getElementsByClassName('head1')
jQuery - $('.abc')
----------------------------------

************************************
Java Script Example

<html>
<body>
 <div id="myregion"></div>

 <script type="text/javascript">
  let msg="This is using Java Script";
  let region= document.getElementById("myregion");
  region.innerHTML=msg;
 </script>
</body>
</html>



<html>
<body>
 <div id="myregion"></div>

 <script type="text/javascript" src="jquery-3.5.1.min.js">
 </script>

 <script type="text/javascript">
  let msg="This is using jQuery";
  $("#myregion").html(msg);
 </script>
</body>
</html>
	OR
<html>
<head>
 <script type="text/javascript">
  let msg="This is using jQuery";
  $(document).ready(function(){
   $("#myregion").html(msg);
  });
</script>

	OR
using shorthand notation

<script type="text/javascript">
var msg="This is using jQuery";
$(function(){
 $("#myregion").html(msg);
});
</script>
	
    CSS with jQuery

    <script>
        let msg = '<h2>This is using jQuery</h2>'
       // $('div').text(msg)
       $('#myregion').html(msg)
       $('#myregion').css('color','red')
    </script>

****************************
Place a string message in the <div> region on the click event of the button

display:none
	
    <script>
       $('button').click(function(){
         let msg = '<h2>This is using jQuery</h2>'       
         $('#myregion').html(msg)
         .css('color','red')
         .css('display','block')
       })
    </script>


            $('#container').html('Welcome to Cognizant Solutions');
            $('#container').css({
                'display': 'block',
                'color': 'blue',
                'text-shadow': '0 0 10px black',
                'font-weight': 'bolder'
            }); 




    <script>
        let logic = ()=>{
         let msg = '<h2>This is using jQuery</h2>'       
         $('#myregion').html(msg)
         .css('color','red')
         .css('display','block')
         .css('text-shadow','0 0 10px red')
        }

       $('button').click(logic)
       
    </script>

-----------------------------------

******************************

Usecase - 1
- Inline JQuery with a paragraph - click on div to hide the div
  along with HTML tag

   <div onclick="$(this).hide()">
$(this).hide('slow')
$(this).hide(2000)
     <p>lorem 50</p>
   </div>
	
- Internal JQuery
  <script>
   $('div').click(function(){
     $(this).hide(2000)
   })	

- External JQuery with a Card
  script.js
- click on button to hide <div>
.toggle(2000)
.slideToggle(1000)  button text "hide" then "show"

External jQuery
/*
$('#hide_div_external').click(function(){
    $(this).hide('slow')
})
*/
$(document).ready(function () {
    $('#btn').click(function () {
        // $('#hide_div_external').hide(2000)

        let btn_label = $('#btn').text()

       $(btn_label==='HIDE')?($('#btn').text('SHOW')):($('#btn').text('HIDE'))

        /*
        if (btn_label == 'HIDE') {
            $('#btn').text('SHOW')
            //$('#hide_div_external').slideUp(2000)
        }
        else {
            $('#btn').text('HIDE')
            //$('#hide_div_external').slideDown(2000)
        }
        */


        $('#hide_div_external').slideToggle(2000)
    })
})
-------------------------------

******************************
    <style>
        body{
            margin:0px;            
        }
        div{
            background-color:lightgreen;
            text-align:center;
            padding:10px;
            margin-bottom:20px;
        }
        div h2{
            margin:0px;
        }
    </style>

<body>
 <!-- for Java Script -->   
 <div>
     <form action="">
         <input type="text" id="input-1">
         <h2 id="display-1"></h2>
     </form>
 </div>

 <!-- for jQuery -->
 <div>
    <form action="">
        <input type="text" id="input-2">
        <h2 id="display-2"></h2>
    </form>
</div> 

<div>
    <form action="">
        <input type="text" id="input-3">
        <h2 id="display-3"></h2>
    </form>
</div> 

<script src="js/jquery-3.5.1.js"></script>
<script>
    /* -- Java Script Way -- */
    let inputBox1 = document.querySelector('#input-1')
    let displayElement1 = document.querySelector('#display-1')

    inputBox1.addEventListener('keyup',function(){
        let textEntered = inputBox1.value
        displayElement1.innerText = textEntered
    })
</script>

<script>
    /*--jQuery Way --*/
    let inputBox2 = $('#input-2')
    let displayElement2 = $('#display-2')
    inputBox2.keyup(function(){
        let textEntered = inputBox2.val()
        displayElement2.text(textEntered)
    })
</script>

<script>
    /*-- jQuery Simplified Manner ---*/
    $('#input-3').keyup(function(){               
        $('#display-3').text($(this).val())
    })
</script>
-------------------------------
jQuery Calculator

for Sum

    <script>
       $('#sum_action').click(function(){
           //get the field values
           let num1 = $('#txtNum1').val()
           let num2 = $('#txtNum2').val()

           if(num1.length>0 && num2.length>0){
             num1 = parseInt(num1)
             num2 = Number(num2)  
             let sum = num1 + num2
              $('.displayResult').text(sum)
           }
           else{
               alert('Please enter both the numbers')
           }
       }) 
    </script>


******************************
Usage of Java Script with HTML
------------------------------
1) Right Away Loading
2) Asynchronous Loading
3) Deferred Loading

1) Loading Right Away
 <script type="text/javascript" src="script.js"></script>
 - HTML Parsing
 - JS Download
 - JS Execute

2) Load JS in Async mode
 <script type="text/javascript" src="script.js" async ></script>
 - HTML Parsing
 - JS Download
 - JS Execute

 
Efficiently load JavaScript with defer and async

Both async and defer are boolean attributes. 

<script type="text/javascript" src="app.js" defer></script>
<script type="text/javascript" src="app.js" async></script>

defer - the defer attribute tells the browser that it should go on working with the page, and load the script "in background", then run the script when it loads.  
- Scripts with "defer" never block the page.
- Scripts with defer always execute when the DOM is ready, but before DOMContentLoaded event.

<script>
  document.addEventListener('DOMContentLoaded', () => alert("DOM ready!"));
</script>


async blocks the parsing of the page while defer does not.

Best Way:
> Add <script> tag at the end of <body> without additional attribute
> Add <script> tag in the <head> section with "defer" attribute

******************************

Use the absolute URL of jQuery file

Using CDN - Content Delivery Network
------------------------------------
1) http://code.jquery.com/jquery-3.5.1.min.js

etc


- Display a message box while clicking on a <div> region


----------------------------
- Program to design a page to add two numbers / or a calculator
- use CDN : http://code.jquery.com/jquery-3.5.1.min.js

- to show a help text message in the focus event of text field and to make it invisible in the lost focus event (onblur)

- to get the mouse co-ordinates of mouse move event in section <div> and also to understand the hover function of jQuery

- to prevent cut , copy , paste and right click
----------------------------

Example to show a help text message in the focus event of text field and to make it invisible in the lost focus event (onblur)

<html>
<head>
<script type="text/javascript" src="jquery-3.5.1.min.js">
</script>

<script type="text/javascript">
$(document).ready(function()
{
  $("#uname").focus(function()
  {
   $("#msg").show();
  });

  $("#uname").blur(function()
  {
   $("#msg").hide();
  });
});
</script>
</head>
<body>
<p style="font-family:verdana;font-size:20px">
Username:<input type="text" id="uname" size="30">

<span id="msg" style="color:green; display:none">Use letters, numbers and hyphens	</span>
</p>
</body>
</html>

****************************
Web page place the data entered in a text field to a particular <div> section in the keyup event


<script type="text/javascript">
$("#uname").keyup(fun1);

function fun1()
{
 let s=$("#uname").val();
 $("#div1").text(s);
}
</script>
</body>
</html>

****************************
$("#fname").keypress(fun1);

$("#country").change(fun1); //drop down list box

$("#div1").mouseover(fun1);
$("#div1").mouseout(fun2);
$("#div1").mousemove(fun3);

**************************
Example to get the mouse co-ordinates of mouse move event in the web page and also to understand the hover function of jQuery

<html>
<head>
<style type="text/css">
#div1
{
width: 200px;
height: 200px;
background-color: #00ff99;
font-size: 25px;
font-family: corbel;
border:2px solid red;
padding:20px;
}
</style>
</head>

<body>
<div id="div1">Place the mouse on Me</div>
<br><br>
<span id="span1" style="color:blue;font-size:20px"> </span>

<script type="text/javascript" src="jquery-3.5.1.min.js">
</script>

<script type="text/javascript">

$("#div1").hover(fun1, fun2);
$("body").mousemove(fun3);

function fun1()
{
 $(this).text("Mouse on me");
}


function fun2()
{
 $(this).html("Mouse gone out");
}

function fun3(event)
{
 let x = event.pageX;
 let y = event.pageY;
 let msg = x + ", " + y;
 $("#span1").html(msg);
}
</script>
</body>
</html>
*************************
jQuery to prevent cut , copy , paste and right click

<html>
<head>
<style>
.peers
{
 font-family:arial;
 font-size:20px;
}
</style>
</head>

<body>
		
Password <input type="password" id="pwd" class="peers">

Retype Password <input type="text" id="rpwd" class="peers">

<script type="text/javascript" src="jquery-3.5.1.min.js">
</script>

<script type="text/javascript">
$(".peers").bind("cut copy paste", fun1);

$(document).bind("contextmenu", fun2);

function fun1(event)
{
alert("cut copy paste is not allowed");
event.preventDefault(); //default functionality will be stopped
}

function fun2(event)
{
alert("right click not allowed");
event.preventDefault();
}
//event = browser given information
</script>
</body>
</html>

****************************

<html>  
<head>  
<script type="text/javascript" src="http://code.jquery.com/jquery-3.5.1.min.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("p").css("background-color","cyan");
 $("p").css("font-size","40"); 
 $("p").css("font-family","verdana"); 
});  
</script>  
</head>  
<body>  
<p>This is paragraph - 1</p>  
<p>This is paragraph - 2</p>  
<p>This is paragraph - 3</p>  
</body>  
</html>  
****************************

02. jQuery Selectors
--------------------
jQuery Selectors are used to select and manipulate HTML elements.

Selectors are used to select one or more HTML elements using jQuery and once the element is selected then you can perform various operation on that.

Different jQuery Selectors
--------------------------
Selector	Syntax		Purpose
------------	----------	-------
Universal	$("*")	It is used to select all elements.

element		$("p")	It will select all p elements.

ID	$("#firstname")	It will select the element with id="firstname"

class	$(".primary")	It will select all elements with class="primary"

Group	$(".primary, .secondary")   It will select all elements with the class "primary" or "secondary"

Group   $("h1,div,p")	It will select all h1, div, and p elements.
etc

Example:



jQuery Filters
--------------
Filters work with selectors to provide even more control over how elements are selected in the document like position or index.

1) :first	$("p:first")	This will select the first 'p' element

2) :last	$("p:last")	This will select the last 'p' element

3) :even	$("tr:even")	This will select all even tr elements

4) :odd		$("tr:odd")	This will select all odd tr elements

5) :first-child	$("p:first-child")	It will select all "p" elements that are the first child of their parent

6) :first-of-type	$("p:first-of-type")	It will select all 'p' elements that are the first p element of their parent

7) :last-child	$("p:last-child")	It will select all p elements that are the last child of their parent

8) :last-of-type	$("p:last-of-type")	It will select all p elements that are the last p element of their parent

Example:

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("p:last-child").css('background-color','yellow');

  $("p:first-child").css('background-color','red');
 });
});  
</script>  
</head>  
<body>  
 <div>
  <p>Paragraph-1</p>
  <p>Paragraph-2</p>
  <p>Paragraph-3</p>
 </div>

 <div>
  <p>Paragraph-4</p>
  <p>Paragraph-5</p>
  <p>Paragraph-6</p>
 </div>
<button id="but">Change Look</button>
</body>  
</html>  

CHILD FILTERS
-------------
- the value of n is "1-indexed", meaning that the counting starts at 1. 
- For other selector expressions such as :eq() or :even jQuery follows JavaScript's "0-indexed" counting.

9) :nth-child(n)	$("p:nth-child(2)")	This will select all 'p' elements that are the 2nd <p> of their parent

10) :nth-of-type(n)	$("p:nth-of-type(2)")	It will select all 'p' elements that are the 2nd 'p' element of their parent

11) :nth-last-child(n)	   $("p:nth-last-child(2)")	This will select all 'p' elements that are the 2nd child of their parent, counting from the last child

12) :nth-last-of-type(n)  $("p:nth-last-of-type(2)")	This will select all p elements that are the 2nd p element of their parent, counting from the last child

Example : 

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("p:nth-child(2)").css('background-color', 'yellow');
 });
});  
</script>  
</head>  
<body>  
<div>
<p>Paragraph-1</p>
<p>Paragraph-2</p>
<p>Paragraph-3</p>
</div>

<hr color=red size=5>

<div>
<p>Paragraph-4</p>
<p>Paragraph-5</p>
<p>Paragraph-6</p>
</div>

<button id="but">Change Look</button>
</body>  
</html>  
******************************

13) :only-child	$("p:only-child")	It will select all p elements that are the only child of their parent

14) :only-of-type	$("p:only-of-type")	It will select all p elements that are the only child, of its type, of their parent

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("p:only-child").css('background-color','yellow');
 });
});  
</script>  
</head>  
<body>  
<div>
<p>Paragraph-1</p>
</div>

<hr color=red size=5>

<div>
<p>Paragraph-1</p>
<p>Paragraph-2</p>
</div>

<button id="but">Change Look</button>
</body>  
</html>  
************************

15) parent > child	$("div > p")	It will select all p elements that are a direct child of a div element


16) parent descendant    $("div p")	It will select all p elements that are descendants of a div element

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("div > p").css('background-color', 'yellow');
 });
});  
</script>  
</head>  
<body> 
<div>
<p>Paragraph-1</p>
</div>

<hr color=red size=5>

<div>
<p>Paragraph-1</p>
<span><p>Paragraph-2</p></span>
<p>Paragraph-3</p>
</div>

<button id="but">Change Look</button>
</body>  
</html>  


17) element + next	$("div + p")	It selects the p element that are next to each div elements


<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("div + p").css('background-color', 'yellow');
 });
});  
</script>  
</head>  
<body> 
<div>
<p>Paragraph-1</p>
</div>
<p>Testing</p>

<hr color=red size=5>

<div>
<p>Paragraph-1</p>
<span><p>Paragraph-2</p></span>
<p>Paragraph-3</p>
</div>
<p>Paragraph-4</p>

<button id="but">Change Look</button>
</body>  
</html>  


18) element ~ siblings     $("div ~ p")	It selects all p elements that are siblings of a div element


<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("div ~ p").css('background-color', 'yellow');
 });
});  
</script>  
</head>  
<body> 
<div>
<p>Paragraph-1</p>
</div>
<p>Testing</p>
<p>Testing</p>
<hr color=red size=5>

<div>
<p>Paragraph-1</p>
<span><p>Paragraph-2</p></span>
<p>Paragraph-3</p>
</div>
<p>Paragraph-4</p>

<button id="but">Change Look</button>
</body>  
</html>  

19) :eq(index)	$("ul li:eq(3)")	It will select the fourth element in a list (index starts at 0)


<html>  
<head>  
<style>
ul
{
 font-family:verdana;
 font-size:18px;
 list-style-type:none
}
li
{
 line-height:2
}
</style>

<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("ul li:eq(3)").css('background-color','yellow');
 });
});  
</script>  
</head>  
<body> 
<ul>
 <li>India</li>
 <li>Pakistan</li>
 <li>China</li>
 <li>Sri Lanka</li>
 <li>Nepal</li>
</ul>
<button id="but">Get jQuery Effect </button>

</body>  
</html>  


20) :gt(no)   $("ul li:gt(3)")	Select the list elements with an index greater than 3

21) :lt(no)	   $("ul li:lt(3)")	Select the list elements with an index less than 3

$("ul li:gt(0)").css('background-color', 'yellow');

$("ul li:lt(2)").css('background-color', 'yellow');


<html>  
<head>  
<style>
ul
{
 font-family:verdana;
 font-size:18px;
 list-style-type:none
}
li
{
 line-height:2
}
</style>

<script type="text/javascript" src="js/jquery-3.5.1.js"> 
</script>  

<script type="text/javascript">  
$(document).ready(function() 
{  
 $("#but").click(function()
 {
  $("ul li:gt(2)").css('background-color','yellow');
 });
});  
</script>  
</head>  
<body> 
<ul>
 <li>India</li>
 <li>Pakistan</li>
 <li>China</li>
 <li>Sri Lanka</li>
 <li>Nepal</li>
</ul>
<br>

<button id="but">Get jQuery Effect </button>

</body>  
</html>  

22) :not(selector)	$("input:not(:empty)")	Select all input elements that are not empty

<html>
<head>
<style>
p
{
font-family:verdana;
font-size:25px;
}
</style>

<script src="js/jquery-3.5.1.js"> </script>

<script>
$(function(){
  $("p:not(.intro)").css("background-color","yellow");
});
</script>
</head>
<body>

<h1>Welcome to My Homepage</h1>

<p class="intro">My name is Sunil.</p>
<p class="intro">I live in Hyderabad.</p>
<p>My best friend is Shareef.</p>

<p>Who is your favourite:</p>

</body>
</html>


23) :header	$(":header")	Select all header elements h1, h2 ...h6

<html>
<head>
<script src="js/jquery-3.5.1.min.js"></script>
<script>
$(document).ready(function()
{
 $(":header").css("background-color","yellow");
 $(":header").css("font-family","verdana");
});
</script>
</head>
<body>

<h1>Welcome to My Homepage</h1>
<h2>I work for Cognizant IT</h2>
<h3>It's a computer training institute</h3>

<p class="intro">My name is Sunil.</p>
<p>I live in Hyderabad.</p>

</body>
</html>


24) :animated	$(":animated")	Select all animated elements

<html>
<head>
<style>
div
{
font-family:verdana;
font-size:30px;
padding:20px;
text-align:center
}
</style>
<script src="js/jquery-3.5.1.js"> </script>

<script> 
$(function(){
function animateDiv()
{
 $("div:eq(0)").animate({width: "50%"}, 5000);
 $("div:eq(0)").animate({width: "100%"}, 5000,animateDiv);
}//function

animateDiv();

$("#b").click(function()
{
 $(":animated").css("background-color", "red");
});
});
</script>
</head>
<body>

<button id="b">Click to change color of the animated element </button>
<br><br>

<div style="background:blue">Div 1 </div><br>
<div style="background:green;">Div 2 </div><br>
<div style="background:yellow;">Div 3 </div>

</body>
</html>



25) :focus	$(":focus")	Select the element that currently has focus

<html>
<head>
<script src="js/jquery-3.5.1.min.js"></script>

<script>
$(document).ready(function()
{
    $("input").focus();
    $(":focus").css("background-color", "yellow");
});
</script>
</head>
<body>

Name : <input type="text" size=30 value="Cognizant IT"/>
 
</body>
</html>


CONTENT FILTERS 
---------------
You can examine the content of selected elements or their visibility property to determine whether they should be included or excluded from the final set

26) :contains(text)	$(":contains('Hello')")	Select all elements which contains the text "Hello"

<html>
<head>
<style>
p
{
font-family:verdana;
font-size:25px;
}
</style>

<script src="js/jquery-3.5.1.min.js"></script>

<script>
$(document).ready(function()
{
    $("p:contains(is)").css("background-color", "yellow");
});
</script>
</head>

<body>

<h1>Welcome to My Homepage</h1>

<p class="intro">My name is Sunil.</p>
<p class="intro">I live in Hyderabad.</p>
<p>My best friend is Shareef.</p>

<p>Who is your favourite:</p>

</body>
</html>


27) :has(selector)	$("div:has(p)")	Select all div elements that have a p element

<html>
<head>
<script src="js/jquery-3.5.1.min.js">
</script>
<script>
$(document).ready(function(){
    $("p:has(span)").css("border", "solid red");
});
</script>
</head>
<body>

<p><span>This is a span element inside a p element. </span></p>
<p>This is a p element with no span element.</p>

</body>
</html>


28) :empty	$(":empty")	Select all elements that are empty

<html>
<head>
<script src="js/jquery-3.5.1.min.js"></script>
<script>
$(document).ready(function(){
    $(":empty").css("background-color", "yellow");
});
</script>
</head>
<body>

<h1>Welcome to My Web Page</h1>

<table border="1">
  <tr>
    <th>Company</th>
    <th></th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Cognizant</td>
    <td>IT</td>
    <td></td>
  </tr>
  <tr>
    <td>Tech Mahindra</td>
    <td></td>
    <td>India</td>
  </tr>
  <tr>
    <td>Accenture</td>
    <td>Limited</td>
    <td>USA</td>
  </tr>
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
 </table>

</body>
</html>



29) :parent	$(":parent")	Select all elements that are a parent of another element

<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("td:parent").css("background-color", "yellow");
});
</script>
</head>
<body>

<h1>Welcome to My Web Page</h1>

<table border="1">
  <tr>
    <th>Company</th>
    <th></th>
    <th>Country</th>
  </tr>
  <tr>
    <td>Cognizant</td>
    <td>IT</td>
    <td></td>
  </tr>
  <tr>
    <td>Tech Mahindra</td>
    <td></td>
    <td>India</td>
  </tr>
  <tr>
    <td>Accenture</td>
    <td>Limited</td>
    <td>USA</td>
  </tr>
  
  <tr>
    <td></td>
    <td></td>
    <td></td>
  </tr>
  <tr>
</table>
</body>
</html>



VISIBILITY FILTERS
------------------

30) :hidden	$("p:hidden")	Select all hidden p elements

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
</head>

<body>
  <p>This is a paragraph.</p>
  <p>This is another paragraph.</p>
  <p style="display:none;font-family:arial;font-size:35px">This is a hidden paragraph.</p>

  <div style="display:none;">This is a hidden div element.</div>

  <script>
    $(":hidden").show(3500);
  </script>
</body>
</html>



31) :visible	$("p:visible")	Select all visible paragraphs

<html>
<head>
<script src="js/jquery-3.5.1.js"> </script>
</head>

<body>
 <h1>This is a heading</h1>
 <p>This is a pargraph.</p>
 <p>This is another paragraph.</p>
 <p style="display:none">This is a hidden paragraph.</p>

 <script>
    $("p:visible").css("background-color", "yellow");
 </script>
</body>
</html>


32) :root	$(":root")		It will select the document's root element

<html>
<head>
<script src="js/jquery-3.5.1.js"> </script>
<script>
$(document).ready(function(){
    $(":root").css("background-color", "yellow");
});
</script>
</head>
<body>

<h1>This is a heading</h1>

</body>
</html>


jQUERY ATTRIBUTES 
-----------------
You can filter the results of a selector statement based on attribute content.

33) [attribute]	   $("[href]")	Select all elements with a href attribute

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
<script>
$(document).ready(function(){
    $("[id]").css("background-color", "yellow");
});
</script>
</head>
<body>

<p>This is a Paragraph</p>
<p id="div1">This is a Paragraph</p>
<p>This is a Paragraph</p>
<h1 id="head1">Cognizant IT Solutions</h1>
</body>
</html>


34) [attribute=value]	  $("[href='default.htm']")	Select all elements with a href attribute value equal to "default.htm"

35) [attribute!=value]  $("[href!='default.htm']")	It will select all elements with a href attribute value not equal to "default.htm"

36) [attribute$=value]	$("[href$='.jpg']")	It will select all elements with a href attribute value ending with ".jpg"

37) [attribute|=value]     $("[title|='Tomorrow']")	Select all elements with a title attribute value equal to 'Tomorrow', or starting with 'Tomorrow' followed by a hyphen

38) [attribute^=value]     $("[title^='Sunil']")	Select all elements with a title attribute value starting with "Sunil"

39) [attribute~=value]    $("[title~='hello']")	Select all elements with a title attribute value containing the specific word "hello"

40) [attribute*=value]     $("[title*='hello']")	Select all elements with a title attribute value containing the word "hello"


FORM FILTERS 
------------

41) :input		$(":input")	It will select all input elements

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
<script>
$(document).ready(function(){
    $(":input").css("background-color","red");
});
</script>
</head>
<body>

<form action="">

Name: <input type="text" name="user"><br><br>

Password: <input type="password" name="password"> <br><br>

<button>Button</button>

<input type="button" value="Another Button"><br><br>

<input type="reset" value="Reset">

<input type="submit" value="Submit"><br>
</form>
</body>
</html>



42) :text	$(":text")	It will select all input elements with type="text"

43) :password	$(":password")	It will select all input elements with type="password"

44) :radio		$(":radio")	It will select all input elements with type="radio"

45) :checkbox	$(":checkbox")	It will select all input elements with type="checkbox"

46) :submit	$(":submit")	It will select all input elements with type="submit"

47) :reset		$(":reset")	It will select all input elements with type="reset"

48) :button	$(":button")	It will select all input elements with type="button"

49) :image	$(":image")	It will select all input elements with type="image"

50) :file		$(":file")	It will select all input elements with type="file"


You can also perform additional filtering of form elements, such as whether items are checked, selected, or enabled

51) :enabled	$(":enabled")	Select all enabled input elements

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
<script>
$(document).ready(function(){
    $(":enabled").css("background-color","red");
});
</script>
</head>
<body>

<form action="">
Name: <input type="text" name="user">
<br><br>

ID:<input type="text" name="id" disabled>
<br><br>

Age:
<select disabled>
  <option>20-30</option>
  <option>30-50</option>
  <option>50+</option>
</select>
<br><br>
<input type="submit" value="SUBMIT">
</form>

</body>
</html>


52) :disabled	$(":disabled")	It will select all disabled input elements

53) :selected	$(":selected")	It will select all selected input elements

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
<script>
$(function(){
    $(":selected").css("color", "red");
});
</script>
</head>
<body>

<form action="">
Name: <input type="text"><br>
Car:
<select>
  <option>Volvo</option>
  <option selected>BMW</option>
  <option>Mercedes</option>px
  <option>Audi</option>
</select>
</form>
</body>
</html>


54) :checked	$(":checked")	It will select all checked input elements

<html>
<head>
<script src="js/jquery-3.5.1.js"></script>
<script>
$(function(){
    $(":checked").wrap("<span style='background-color:red'>"
});

</script>
</head>
<body>

<form>
Name: <input type="text"><br><br>

<input type="checkbox" name="vehicle" value="Bike">Bike <br><br>

<input type="checkbox" name="vehicle" value="Car" checked>Car<br><br>

<input type="checkbox" name="vehicle" value="Airplane">Plane<br><br>

<input type="submit">
</form>

<p>Note: We use jQuerys .wrap method to highlight the selected elements, because Firefox does not support background color on checkboxes.</p>

</body>
</html>

======================================================

jQuery Effects
==============
jQuery enables us to add effects on a web page. jQuery effects can be categorized into fading, sliding, hiding/showing and animation effects.

hide() , show() --> toggle()
fadeIn(), fadeOut() --> fadeToggle()
slideUp(), slideDown() ---> slideToggle()


1) jQuery hide()
----------------
The jQuery hide() method is used to hide the selected elements.

Syntax:

    $(selector).hide();  
    $(selector).hide(speed)
    $(selector).hide(speed, callback);  
    $(selector).hide(speed, easing, callback);  

where the arguments are :
(a) speed: It is an optional parameter. It specifies the speed of the delay. Its possible values are "slow", "fast" and "milliseconds".

(b) easing: It specifies the easing function to be used for transition.

(c) callback: It is also an optional parameter. It specifies the function to be called after completion of hide() effect.

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="styles.css">
    <style>
        .btn{
            background:linear-gradient(45deg,black,limegreen);
            color:white;
            font-size:18px;
            padding:10px;
            width:140px;
            border:none;
            border-radius:15px;
        }
        #matter{
            margin:20px 0px;
            font-size:18px;
            text-align:justify;
            background:linear-gradient(45deg,black,orangered);
            color:white;
            padding:10px;
            border-radius:15px;
        }
    </style>
    <title>jQuery Hide</title>
</head>
<body>
    <nav>
        <h2>jQuery | Effects | Hide</h2>
    </nav>
    <section>
        <article>
            <button id="hideButton" class="btn">HIDE</button>
            <div id="matter">
                lorem100......d
            </div>
        </article>        
    </section>
    <script src="../js/jquery-3.5.1.js"></script>
    <script>
        let afterHide = ()=>{
            alert('Matter for hidden')
        }

         $('#hideButton').click(function(){
             //$('#matter').hide()
             //$('#matter').hide(2000)
             //$('#matter').hide(2000,'linear')
             $('#matter').hide(2000,afterHide)
         })          
    </script>
</body>
</html>



2) jQuery show()
----------------
The jQuery show() method is used to show the selected elements.

Syntax:

    $(selector).show([speed][,easing][,callback]);  
<html>  
<head>  
<script src="jquery-3.5.1.js"></script>  

<script>  
$(document).ready(function()
{  
 $("#hide").click(function()
 {  
  $("p").hide(3000);  
 });  

 $("#show").click(function()
 {  
  $("p").show(3000);  
 });  
});  
</script>  
</head>  

<body>  
<p style="font-family:verdana; font-size:30px" id="para">  
Cognizant IT Solutions<br>
Private Limited<br>
S R Nagar<br>
Hyderabad
</p>  

<button id="hide">Hide Paragraph </button>  
<button id="show">Show Paragraph </button> 
</body>  
</html>  


3) jQuery toggle()
------------------
The jQuery toggle() is a special type of method which is used to toggle between the hide() and show() method. It shows the hidden elements and hides the shown element.

Syntax:

$(selector).toggle(speed, easing, callback);  

<html>  
<head>  
<script src="jquery-3.5.1.js"></script>  

<script>  
$(function()
{    
 $("button").click(function()
 {    
  //$("p").toggle();
  $("p").toggle(2500);    
 });    
});    
</script>  
</head>  
<body>  
<p style="font-family:verdana; font-size:30px">  
Cognizant IT Solutions<br>
S R Nagar<br>
Ameerpet<br>
Hyderabad
</p>  

<button>Show/ Hide</button>  
</body>  
</html>  

-----------------------------------
// hide() , show()
$('#btn-1').click(function () {
    if($(this).text() === 'hide'){
        $(this).text('show');
        $('#card-1').hide(500);
    }
    else{
        $(this).text('hide');
        $('#card-1').show(500);
    }
});

// toggle()
$('#btn-2').click(function () {
    $('#card-2').toggle(500);
    if($(this).text() === 'hide'){
        $(this).text('show');
    }
    else{
        $(this).text('hide');
    }
});

// fadeIn , FadeOut()

// FadeToggle()

// slidUp() , slideDown()

// slideToggle()

-----------------------------------

4) jQuery fadeIn()
------------------
jQuery fadeIn() method is used to fade in the element.

Syntax:

    $(selector).fadein();  
    $(selector).fadeIn(speed,callback);   
    $(selector).fadeIn(speed, easing, callback);  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("#div1").fadeIn();  
    $("#div2").fadeIn("slow");  
    $("#div3").fadeIn(5000);  
  });  
});  
</script>  
</head>  
<body>  
<p>fadeIn() method examples</p>  
<button>Click to fade in boxes</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;display:none;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;display:none;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;display:none;background-color:blue;"></div>  
</body>  
</html>   

5) jQuery fadeOut()
-------------------
The jQuery fadeOut() method is used to fade out the element.

Syntax:

    $(selector).fadeOut();  
    $(selector).fadeOut(speed,callback);   
    $(selector).fadeOut(speed, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("#div1").fadeOut();  
    $("#div2").fadeOut("slow");  
    $("#div3").fadeOut(5000);  
  });  
});  
</script>  
</head>  
<body>  
<p>fadeOut() method examples</p>  
<button>Click to fadeOut in boxes </button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;background-color:blue;"></div>  
</body>  
</html>   

6) jQuery fadeToggle()
----------------------
jQuery fadeToggle() method is used to toggle between the fadeIn() and fadeOut() methods. If the elements are faded in, it will make them faded out and if they are faded out it will make them faded in.

Syntax:

    $(selector).fadeToggle();  
    $(selector).fadeToggle(speed,callback);   
    $(selector).fadeToggle(speed, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
   $("#div1").fadeToggle(2000);  
  });  
});  
</script>  
</head>  
<body>  
<button>Fade Toggle</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>

</body>  
</html>   


7) jQuery fadeTo()
------------------
jQuery fadeTo() method is used to fading to a given opacity.

Syntax:

    $(selector).fadeTo(speed, opacity);  
    $(selector).fadeTo(speed, opacity, callback);   
    $(selector).fadeTo(speed, opacity, easing, callback);  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
     $("#div1").fadeTo("slow", 0.1);  
     $("#div2").fadeTo("slow", 0.3);  
     $("#div3").fadeTo("slow", 0.9);  
  });  
});  
</script>  
</head>  
<body>  
<button>Fade To</button> 
<br><br>  

<div id="div1" style="width:80px;height:80px;background-color:red;"></div>
<br>  

<div id="div2" style="width:80px;height:80px;background-color:green;"></div>
<br>  

<div id="div3" style="width:80px;height:80px;background-color:blue;"></div>  
</body>  
</html>   

8) jQuery slideDown()
---------------------
jQuery slideDown() method is used to slide down an element.

Syntax:

    $(selector).slideDown(speed);  
    $(selector).slideDown(speed, callback);   
    $(selector).slideDown(speed, easing, callback);  

<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;  
    display: none;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideDown("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide down panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  


9) jQuery slideUp()
-------------------
jQuery slideUp() method is used to slide up an element.

Syntax:

    $(selector).slideUp(speed);  
    $(selector).slideUp(speed, callback);   
    $(selector).slideUp(speed, easing, callback);  


<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;      
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideUp("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide up panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  

10) jQuery slideToggle()
------------------------
jQuery slideToggle () method is used to toggle between slideUp() and slideDown() method. If the element is slide down, it will slide up the element and if it is slide up, it will slide down.

Syntax:

    $(selector).slideToggle(speed);  
    $(selector).slideToggle(speed, callback);   
    $(selector).slideToggle(speed, easing, callback);  

<html>  
<head> 
<style>   
#panel, #flip 
{  
    padding: 5px;  
    text-align: center;  
    background-color: #00FFFF;  
    border: solid 1px #c3c3c3;  
}  
#panel 
{  
    padding: 50px;
   display:none;
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function(){  
    $("#flip").click(function(){  
        $("#panel").slideToggle("slow");  
    });  
});  
</script>  

</head>  
<body>  
<div id="flip">Click to slide Toggle panel </div>  
<div id="panel">Hello jQuery! <br> It is the best JS Framework</div>  
</body>  
</html>  
-----------------------------------


11) jQuery animate()
--------------------
The jQuery animate() method provides you a way to create custom animations.

Syntax:
 $(selector).animate({params}, speed, easing, callback);  

where the attributes are:
a) params - this parameter defines the CSS properties to be animated.

b) speed - this parameter is optional and specifies the duration of the effect. It can be set as "slow" , "fast" or milliseconds.

d) callback - this parameter is also optional and it is a function which is executed after the animation completes. 

Example - 1

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
   //$("div").animate({left: '450px'});
  $("div").animate({left: '450px'}, 5000); 
 });  
});  
</script>   
</head>  

<body>  
<button>Start Animation</button>  
<div style="background:#FFA100;height:100px;width:100px;position:absolute;"></div>  
</body>  
</html>  

Example - 2: jQuery animate() method using multiple properties

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").animate(
  {
    left: '250px',  
    opacity: '0.5',  
    height: '200px',  
    width: '200px'  
  },5000);  
 });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<br><br>
<div 
style="background:#FF0000;height:100px;width:100px;position:absolute;">
</div>  
</body>  
</html>  


Example - 3 :: jQuery animate() method using relative values

You can also define relative values (it is relative to the element's current value) by putting += or -= in front of the value. 

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>   
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").animate(
  {  
   left: '250px',  
   height: '+=150px',  
   width: '+=150px'  
  },5000);  
 });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<br><br>
<div style="background:#98bf21; height:100px;width:100px;position:absolute;"> 
</div>  
</body>  
</html>   

Example - 4:: jQuery animate() method using predefined value

You can also specify a property's animation value as "show" , "hide" , or "toggle".

In this example, we are using "toggle" value for height, it means it will show/hide the selected element.

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>   
$(document).ready(function()
{  
    $("button").click(function()
    {  
        $("div").animate({height: 'toggle'  });  
    });  
});  
</script>   
</head>  
<body>  
<button>Start Animation</button>  
<div style="background:#ff0000; height:100px;width:100px;position:absolute;"></div>  
</body>  
</html>  


12) jQuery delay()
------------------
The jQuery delay() method is used to delay the execution of functions in the queue. It is a best method to make a delay between the queued jQuery effects. The jQuery delay () method sets a timer to delay the execution of the next item in the queue.

Syntax:

    $(selector).delay (speed, queueName)   

Arguments are:

(a) speed: It is an optional parameter. It specifies the speed of the delay. Its possible vales are slow, fast and milliseconds.

(b) queueName: It is also an optional parameter. It specifies the name of the queue. Its default value is "fx" the standard queue effect.

Example - 1

<html>    
<head>    
<script src="jquery-3.5.1.min.js"> </script>    
<script>    
$(document).ready(function()
{    
  $("button").click(function()
  {    
    $("#div1").delay("slow").fadeIn();    
  });    
});    
</script>    
</head>    
<body>    
<button>Click Here</button>
<br>  <br>
<div id="div1" style="width:90px;height:90px;display:none;background-color:black;"></div>
</body>    
</html>    

Example - 2:
jQuery delay() example with different values

<html>    
<head>    
<script src="jquery-3.5.1.min.js"> </script>    

<script>    
$(document).ready(function(){    
  $("button").click(function(){    
    $("#div1").delay("fast").fadeIn();    
    $("#div2").delay("slow").fadeIn();    
    $("#div3").delay(1000).fadeIn();    
    $("#div4").delay(2000).fadeIn();    
    $("#div5").delay(4000).fadeIn();    
});    
});    
</script>    
</head>    
<body>    

<button>Click to fade in boxes with a different delay times</button>    
<br><br>    
<div id="div1" style="width:90px;height:90px;display:none;background-color:black;"></div>
<br><br>

<div id="div2" style="width:90px;height:90px;display:none;background-color:green;"></div>
<br><br>

<div id="div3" style="width:90px;height:90px;display:none;background-color:blue;"></div>
<br><br>

<div id="div4" style="width:90px;height:90px;display:none;background-color:red;"></div>
<br><br>    

<div id="div5" 
style="width:90px;height:90px;display:none;background-color:purple;"></div>   
</body>    
</html>    

*******************************
13) jQuery html()
-----------------
jQuery html() method is used to change the entire content of the selected elements. It replaces the selected element content with new contents.

Syntax:

(a) $(selector).html()  - It is used to return content.

(b) $(selector).html(content)  - It is used to set content.

(c) $(selector).html(function(index,currentcontent)) - 
It is used to set content by calling function.


The text() method is used to set or return only the text content of the selected elements.
Parameters of jQuery html() method

(a) Content 	It is an essential parameter. It is used to specify the new content for the selected elements. It can also contain HTML tags.

(b) Function (index, currentcontent) 	It is an optional parameter. It specifies a function that returns the new content for the selected elements.

 > Index: It shows the index position of the element in the set.
 > Currentcontent: It shows the current HTML content of the selected element.

Example - 1

<html>  
<head>  
<style>
p
{
 font-family:verdana;
 font-size:30px;
}
</style>
<script src="jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("p").html("Hello <b>jQuery</b>"); 
  });  
});  
</script>  
</head>  
<body>  
 <button>Click Here</button>  
 <br><br>
 <p>This is a paragraph.</p>  
 <p>This is another paragraph.</p>  
</body>  
</html>  

Example - 2:

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
    $("button").click(function()
	{  
     alert($("p").html());  
    });  
});  
</script>  
</head>  
<body>  
  
<button>Return the content of p element</button>  
<br><br>

<p>This is first <b>paragraph</b>.</p>  

<p>This is another <b>paragraph</b>.</p>  
</body>  
</html>  



********************************

14) jQuery text()
-----------------
The jQuery text() method is used to set or return the text content of the selected elements.

What is the difference between jQuery text() method and jQuery html() method?

Diff (1): The jQuery text() method is used to set or return html content without HTML markup while, html() method is used to set or return the innerHTML (text + HTML markup).

Diff (2): The jQuery text() method can be used in both XML and HTML document while jQuery html() method can't.

Syntax:

To return text content-    $(selector).text()   

To set text content -    $(selector).text(content)   

To set text content using a function:
   $(selector).text(function(index,currentcontent))  

Content 	It is a mandatory parameter. It specifies the new text content for the selected elements. The special characters will be encoded in this parameter.
Function (index,currentcontent) 	It is an optional parameter. It specifies the function that returns the new text content for the selected elements.

    Index: It provides the index position of the element in the set.
    Currentcontent: It provides the current content of the selected elements.


Example - 1

<html>  
<head>  
<style>  
p 
{  
color: blue;  
margin: 8px; 
font-size:30px;
font-family:verdana;
}  
b 
{  
color: red;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script> 
$(document).ready(function()
{
 $("button").click(function()
 {
  var str=$("p:first").text();  
  //alert(str);
  $("p:last").html(str);  
 });
});
</script>  

</head>  
<body>  
<p><b>Hello</b> jQuery</p>  
<p>Paragraph - 2</p>  
<br>
<button>Click Me</button>
</body>  
</html>  


Example - 2

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").html("<h1>Welcome to Cognizant IT Solutions!</h1>");  
 });  
});  
</script>  
</head>  
<body>  
<button>Click here to set text content for all p elements</button>  
<p>Paragraph - 1</p>  
<p>Paragraph - 2</p>  
</body>  
</html>  


*********************************

15) jQuery val()
----------------

There are two usage of jQuery val() method.

(a) It is used to get current value of the first element in the set of matched elements.

(b) It is used to set the value of every matched element.

Syntax:

  $(selector).val()  - It is used to get value.

  $(selector).val(value) - It is used to set value.

  $(selector).val(function(index,currentvalue)) - 
It is used to set value using function.

Function (index, currentvalue)	It is an optional parameter. It is used to specify a function that returns the value to set. 

Example - 1 : Display the selected value of the drop down list box in the first paragraph

<html>    
<head>    
<style>    
p 
{    
color: red;    
margin: 4px;    
font-family:verdana;
font-size:25px;
}    
b 
{    
color: blue;    
}    
</style>    

<script src="js/jquery-3.5.1.min.js"> </script>    

<script>    
function displayVals() 
{    
  var data=$("#course").val();  
  $("p:first").html("<b>Selected Value: &nbsp;&nbsp;&nbsp;"+ data+"</b>"); 
}

$(document).ready(function()
{
 $("select").change(displayVals);  
});
</script>   
</head>    

<body>    
<p>**********</p>    
<br>
<p> Select the Course : 
<select id="course">    
 <option>WAD</option>    
 <option>Java</option>    
 <option>Android</option>    
 <option>SQL Server</option>    
</select>    
</p>
</body>    
</html>   


Example - 2

<html>  
<head>  
<style>  
*
{
font-family:verdana;
font-size:25px;
}
p 
{    
color: red;    
margin: 4px;    
}    
b 
{    
color: blue;    
} 
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
displayVals();

function displayVals() 
{  
 var sv=$("#single").val();  

 var mvs=$("#multiple").val() || [];  
 $("p").html("<b>Single:</b> " + sv +   " <b>Multiple:</b> " + mvs.join(", ")); 
}  

$(document).ready(function()
{
 $("select" ).change(displayVals);  
});
</script>  

</head>  

<body>  
<p></p>  
<select id="single">  
  <option>Single -1</option>  
  <option>Single -2</option> 
  <option>Single -3</option>  
</select>  

<select id="multiple" multiple>  
  <option selected="selected"> Multiple -1</option>  
  <option>Multiple -2</option>  
  <option>Multiple -3</option>  
</select>  

</body>  
</html> 


Example - 3

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("input:text").val("Cognizant IT");  
 });  
});  
</script>  
</head>  
<body>  
<p>
Name: <input type="text" name="name" value="Sunil">
</p>  
<button>Set the value of the input field 
</button>  
</body>  
</html>  

********************************************
16) jQuery css()
----------------
The jQuery CSS() method is used to get or set style properties or values for selected elements. 

jQuery CSS() method provides two ways:

1) Return a CSS property
Syntax:    .css("propertyname");  

2) Set a CSS property
Syntax:    .css("propertyname","value");     

Example - 1

<html>
<head>  
<style>
*
{
 font-family:Tahoma;
 font-size:30px;
}
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    alert("Background color of Paragraph = " + $("p").css("background-color"));  
  });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is ed.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<button>Click here to get the background-color of first matched element</button>  
</body>  
</html>   

Note: The above example returns the background-color value of the first matched element. 


<html>
<head>  
<style>
*
{
 font-family:Tahoma;
 font-size:30px;
}
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
  $("button").click(function()
  {  
    $("p").css("background-color","pink");  
  });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is ed.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<button>Change Background color of all Paragraphs</button>  
</body>  
</html>   


3) Set multiple CSS properties

we can set multiple CSS properties together by using the following syntax:

css({"propertyname":"value", "propertyname":"value",...});    

<html>
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").css({"background-color": "yellow","font-size": "200%"});  
 });  
});  
</script>  
</head>  
<body>  
<h2>This is a heading</h2>  
<p style="background-color:#ff0000">The background-color of this paragraph is red.</p>  
<p style="background-color:#00ff00">The background-color of this paragraph is green.</p>  
<p style="background-color:#0000ff">The background-color of this paragraph is blue.</p> 
 
<p>This paragraph has no background-color.</p>  
<button>Click here to set multiple styles for all selected elements.</button>  
</body>  
</html>  

***************************

17) jQuery before()
-------------------
The jQuery before() method is used to insert the specified content before the selected elements. It adds the content specified by the parameter, before each element in the set of matched elements.

The before() and insertBefore() both methods are used to perform same task. The main difference between them is in syntax, and the placement of the content and the target.

Syntax:

$(selector).before(content, function(index))  

Content 	It is a mandatory parameter. It specifies the content to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements 

Function (index) 	It specifies a function that returns the content which is used to insert.

Index: It provides the index position of the element in the set.

Example - 1
<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
   $("p").before("<p><b>Cognizant IT</b></p>");  
 });  
});  
</script>  
</head>  
<body>  
 <button>Insert content before each p element</button>  
 <p>This is a software development center.</</p>  
 <p>This is a training institute.</p>  
</body>  
</html>  
********************************

18) jQuery prepend()
--------------------
The jQuery prepend() method is used to insert the specified content at the beginning (as a first child) of the selected elements. It is just the opposite of the jQuery append() method.

If you want to insert the content at the end of the selected elements, you should use the append() method.

Syntax:

    $(selector).prepend(content,function(index,html))  

Content 	It is a mandatory parameter. It specifies the content which you want to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function (index, html) 	It is an optional parameter. It specifies a function that returns the content which is inserted.

    Index:It is used to provide the index position of the element in the set.
    Html: : It provides the current HTML of the selected element.


<html>    
<head>    
<script src="js/jquery-3.5.1.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#btn1").click(function(){    
        $("p").prepend("<b>Prepended text</b>. ");    
    });    
});    
</script>    
</head>    
<body>    
<p>This is the first paragraph.</p>    
<p>This is the second paragraph.</p>    
<button id="btn1">Prepend text</button>    
</body>    
</html>    


Example - 2

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("p").prepend("<b>Prepended text</b>. ");  
    });  
    $("#btn2").click(function(){  
        $("ol").prepend("<li>Prepended item</li>");  
    });  
});  
</script>  
</head>  
<body>  
<p>This is the first paragraph.</p>  
<p>This is the second paragraph.</p>  
<ol>  
  <li>Item no.1</li>  
  <li>Item no.2</li>  
  <li>Item no.3</li>  
</ol>  
<button id="btn1">Prepend text</button>  
<button id="btn2">Prepend list item</button>  
</body>  
</html>  

**************************************************

19) jQuery after()
------------------
The jQuery after() method is used to insert specified content after the selected element. It is just like jQuery append() method.

If you want to insert content before the selected element, you should use jQuery before() method.

Syntax:

    $(selector).after(content,function(index))   


Content 	It is a mandatory parameter. It specifies the content to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements 

Function (index) 	It specifies a function that returns the content which is used to insert.

    index: It provides the index position of the element in the set.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        $("p").after("<p><b>Cognizant IT</b></p>");  
    });  
});  
</script>  
</head>  
<body>  
<button>Insert content after each p element</button>  
<p>This is a tutorial website.</p>  
<p>This is a training institute.</p>  
</body>  
</html>  


**************************************

20) jQuery insertAfter()
------------------------
The jQuery after() and jQuery insertAfter() both methods are used to perform the same task of inserting additional contents after the selected elements.

Difference between jQuery after() and insertAfter()

The main difference between after() and insertAfter is in syntax and placement of the content and target.

In after() method, target is the selected element and content is placed as an argument of the method.

    $(target).after(contentToBeInserted)  

In insertAfter() method, content is the selected element and target is placed as an argument of the method.

    $(contentToBeInserted).insertAfter(target)  

Note: If you want to insert HTML elements before the selected element, you should use the insertBefore() method.

Syntax:

    $(content).insertAfter(selector)  

Content 	It is a mandatory parameter. It specifies the content which you want to insert.
Selector 	It is also a mandatory parameter. It specifies the place where you insert the content.

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("<span><b>Cognizant IT</b></span>").insertAfter("p");  
 });  
});  
</script>  
</head>  
<body>  
<button>Insert span element after each p 
element</button>  
<p>This is a tutorial website.</p>  
<p>This is a training institute.</p>  
</body>  
</html>  

*******************************

21) jQuery append()
-------------------
The jQuery append() method is used to insert specified content as the last child (at the end of) the selected elements in the jQuery collection.

The append () and appendTo () methods are used to perform the same task. The only difference between them is in the syntax.

Syntax:

    $(selector).append(content, function(index, html))  

Content 	It is a mandatory parameter. It specifies the content which you want to insert. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function (index,html) 	It is an optional parameter. It specifies the function that returns the content to insert.

    Index: It returns the index position of the element in the set.
    HTML: It returns the current HTML of the selected element.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("p").append(" <b>Newly added appended text</b>.");  
    });  
    $("#btn2").click(function(){  
        $("ol").append("<li><b>Newly added appended item</b></li>");  
    });  
});  
</script>  
</head>  
<body>  
<p>This is a paragraph.</p>  
<p>This is another paragraph.</p>  
<ol>  
  <li>Item no.1</li>  
  <li>Item no.2</li>  
  <li>Item no.3</li>  
</ol>  
<button id="btn1">Append text</button>  
<button id="btn2">Append item</button>  
</body>  
</html>  

******************************************

22) jQuery appendTo()
---------------------
The appendTo() method is used to add additional content at the end of the selected elements. It is same as jQuery append() method. There is only syntactical difference between append() and appendTo() methods.

Syntax:

    $(content).appendTo(selector)   


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        $("<span><b>Cognizant IT</b></span>").appendTo("p");  
    });  
});  
</script>  
</head>  
<body>  
<button>Add new content at the end of each p element</button>  
<p>I am a new student.</p>  
<p>I am also a new student.</p>  
</body>  
</html>  

*********************************
23) jQuery clone()
------------------
The jQuery clone() method is used to make copies of the set of matched elements. It also makes copies of their child nodes, texts and attributes. The clone() method is a convenient way to duplicate elements on a page.

Syntax:

    $(selector).clone(true|false)  

true 	It specifies that event handlers also should be copied.
false 	It is a default parameter. It specifies that event handler should not be copied.

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").clone().appendTo("body");  
 });  
});  
</script>  
</head>  
<body>  
<p><b> Paragraph-1</b></p>  
<p><b>Paragraph - 2</b></p>  
<button>Click here, to clone all p elements, and append them to the body element</button>  
</body>  
</html>  


**************************************

24) jQuery remove()
-------------------

This method is used to remove the selected elements out of the DOM. It removes the selected element itself, as well as everything inside it (including all texts and child nodes). This method also removes the data and the events of the selected elements.
If you want to remove elements without removing data and events, you should use the detach() method. If you want to remove only data and events, use the empty() method.

Syntax:

    $(selector).remove()  
    $(selector).remove(selector)  

Selector 	is an optional parameter. It specifies whether to remove one or more elements. If you have to remove more than one element then you should separate them with comma (,).

<html>  
<head>  
<style>  
p 
{  
 background: pink;  
 margin: 6px 0;  
}  
</style>  

<script src="https://code.jquery.com/jquery-1.10.2.js"> </script>  
</head> 

<body>  
<p>Hello Guys!</p>  
This is Cognizant IT<br>  
<p>A place for all technology.</p>  
<button>Execute remove() method on 
paragraphs</button>  

<script>  
$("button" ).click(function() 
{  
 $("p").remove();  
});  
</script>  
</body>  
</html>  

****************************

25) jQuery empty()
------------------
This method is used to remove all child nodes and content from the selected elements. This method doesn't remove the element itself.

If you want to remove the element without removing data and events, you should use the detach() method.

If you want to remove the element as well as its data and events, you should use the remove() method.

Syntax:

    $(selector).empty()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("button").click(function()
{  
  $("div").empty();  
});  
});  
</script>  
</head>  
<body>  
<div style="height:150px;background-color:yellow">  
    11111111111<br/>  
    22222222222</br>  
    33333333333<br/>  
    44444444444<br/>  
    55555555555<br/>  
    66666666666<br/>  
    <p><b>This numbers are written inside the div.</b></p>  
    </div>  
    <p>This paragraph is written outside the div.</p>  
    <button>Execute empty() method to remove the content of div element.</button>  
    </body>  
    </html>  


************************************
26) jQuery detach()
-------------------
The jQuery detach() method is used to remove the selected elements, including all texts and child nodes and keeps only data and events.

This method saves a copy of the removed elements to reinsert them whenever they needed later.

There are some other methods also which are used to remove elements e.g. jQuery remove() method, jQuery empty() method etc. But there is a little difference among them.

jQuery remove() method: This method is used to remove the elements as well as its data and events.

jQuery empty() method: This method is used to remove only the content from the selected elements.

Syntax:

    $(selector).detach()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").detach();  
 });  
});  
</script>  
</head>  
<body>  
<p>Hello Guys!</p>  
<p>This is a Paragraph</p>  
<button>Click here to detach all p 
elements</button>  
</body>  
</html>   

Detach2.html

<html lang="en">  
<head>  
<style>  
p 
{  
 background: lightpink;  
 margin: 6px 0;  
 font-family:verdana;
 font-size:24px;
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p>Hello Guys!</p>  
<p>This is a Paragraph</p>  
<button>Click here to Attach/detach all p elements. </button>  

<script>  

var p;  
$("button").click(function() 
{  
if(p) 
{  
 p.appendTo("body");  
 p = null;  
} 
else 
{  
 p=$("p").detach();  
}  
});  
</script>  
</body>  
</html>  


Difference between detach() and remove() method

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("#btn1").click(function(){  
        $("body").append($("#p1").detach());  
    });  
    $("#btn2").click(function(){  
        $("body").append($("#p2").remove());  
    });  
    $("p").click(function(){  
        $(this).animate({fontSize: "+=1px"})  
    });  
});  
</script>  
</head>  
<body>  
<p id="p1"><b>This paragraph will keep its click event even after it is moved.</b></p>  
<p id="p2">This paragraph will not keep its click event after it is moved.</p>  
<button id="btn1">Detach and append p element</button>  
<button id="btn2">Remove and append p element</button>  
</body>  
</html>  

By the above example, it is clear that jQuery detach() method doesn't remove inner data and events. In the above example, the click event is remained safe even after the detach() method is applied.

*********************************************

27) jQuery scrollTop()
----------------------
This method is used to set or return the vertical scrollbar position for the selected element. When the scrollbar is on the top, it specifies the position 0.

To return the position: When this method is used to return the position, it provides the current vertical position of the first matched element in the set.

To set the position: When this method is used to set the position, it sets the vertical position of the scrollbar for all matched element.

Syntax:

To return vertical scrollbar position:

    $(selector).scrollTop()  
    $(selector).scrollTop(position)  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  //$("div").scrollTop(25);
  alert($("div").scrollTop()+" px");  
 });  
});  
</script>  
</head>  
<body>  
<div style="border:1px solid black; width:150px;height:100px;overflow:auto"> 
111111111111<br>
22222222222<br>
33333333333<br>
111111111111<br>
22222222222<br>
33333333333<br>
111111111111<br>
22222222222<br>
33333333333
</div>

<br>  

<button>Return the vertical position of the scrollbar</button>  
<p>Move the scrollbar down and click the 
button again.</p>  
</body>  
</html>  


*******************************

28) jQuery attr()
-----------------
The jQuery attr() method is used to set or return attributes and values of the selected elements.

There are two usage of jQuery attr() method.

(a) To return attribute value: This method returns the value of the first matched element.

(b) To set attribute value: This method is used to set one or more attribute/value pairs of the set of matched elements.

Syntax:

To return an attribute's value:  
  $(selector).attr(attribute)  

To set an attribute and value:   
  $(selector).attr(attribute,value)  

To set an attribute and value by using a function:  $(selector).attr(attribute,function(index,currentvalue))  

To set multiple attributes and values:   $(selector).attr({attribute:value, attribute:value,...})   

where:

Attribute 	This parameter is used to specify the name of the attribute.
Value 	This parameter is used to specify the value of the attribute.
Function (index, currentvalue) 	It is a parameter to specify a function that returns an attribute value to set.

    Index: It is used to receive the index position of the element in the set.
    Currentvalue: It is used to provide the current attribute value of selected elements.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script> 

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("img").attr("width","500"); 
  $("img").attr("src","images/im3.jpg"); 
  $("img").attr("title","Good Afternoon");

  alert($("img").attr("src"));
 });  
});  
</script>  
</head>  

<body>  
<img src="images/gm.jpg" alt="Good Morning Friends" width="284" height="160" title="Good Morning"> <br>

<button>Set the width attribute of the image</button>  
</body>  
</html>  


29) jQuery prop()
-----------------
jQuery prop() method is used for two purpose.

> It is used to return the value of a property for the first element in a set of matched elements.

> It is used to set one or more property value for a set of matched element.

The jQuery prop() method is generally used to retrieve property values i.e. DOM properties (like tagName, nodeName, defaultChecked) or own custom made properties. This is a very convenient way to set the values of properties, especially the multiple properties. 

If you want to retrieve HTML attributes, you should use the attr() method instead.

The removeProp() method is used to remove a property. 

Syntax:

To return the value of a property:      $(selector).prop(property)  

To set the property and value:      $(selector).prop(property,value)  

To set property and value by using a function:    $(selector).prop(property,function(index,currentvalue))  

To set multiple properties and values:    $(selector).prop({property:value, property:value,...})  


Property 	It specifies the name of the property.
Value 	It defines the value of the property.
Function(index, currentvalue) 	It specifies a function which returns the value of the property to set.

    Index: It provides the index position of the element in the set.
    Currentvalue: It provides the current property value of the selected element.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function()
{  
    $("button").click(function()
    {  
        var $x = $("div");  
        $x.prop("color","#e0eeee");  
        $x.append("The value of the color property: " + $x.prop("color"));  
        $x.removeProp("color");  
        $x.append("<br>Now the value of the color property: " + $x.prop("color"));  
    });  
});  
</script>  
</head>  
<body>  
<button>Add and remove a property</button><br><br>  
<div></div>  
</body>  
</html>  


Example - 2

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>prop demo</title>  
  <style>  
  p {  
    margin: 20px 0 0;  
  }  
  b {  
    color: red;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<input id="check1" type="checkbox" checked="checked">  
<label for="check1">Check me</label>  
<p></p>  
<script>  
$( "input" ).change(function() {  
  var $input = $( this );  
  $( "p" ).html(  
    ".attr( \"checked\" ): <b>" + $input.attr( "checked" ) + "</b><br>" +  
    ".prop( \"checked\" ): <b>" + $input.prop( "checked" ) + "</b><br>" +  
    ".is( \":checked\" ): <b>" + $input.is( ":checked" ) ) + "</b>";  
}).change();  
</script>  
</body>  
</html>  


Difference between jQuery attr() and jQuery prop() method: 

(a) The jQuery attr() method is used to retrieve the HTML attribute values while jQuery prop() method is used to retrieve the property values.

(b) The attr() method changes the attribute of the HTML tag while the prop() method changes a property for the HTML tag as per the DOM tree.

(c) Properties are generally simpler to deal with than attributes so the jQuery prop() method is mostly used rather than attr() method.


30) jQuery offset()
-------------------
The jQuery offset() method is used to get the current offset of the first matched element.

It provides two methods: to set or return the offset co-ordinates for the selected elements, relative to the document.

    To return the offset: When this method is used to return the offset, it returns the offset co-ordinates of the FIRST matched element. It specifies the object's two properties: the top and left positions in pixels.
    To set the offset: When this method is used to set the offset, it sets the offset co-ordinates of ALL matched elements.


Syntax:

To return the offset co-ordinates:    	      $(selector).offset()   

To set the offset co-ordinates:            $(selector).offset({top:value,left:value})   

To SET offset co-ordinates using a function:    $(selector).offset(function(index,currentoffset))   

{top:value,left:value} 	It is a mandatory parameter while setting the offset. It specifies the top and left co-ordinates in pixels.
Function (index,currentoffset): 	It is an optional parameter. It specifies a function that returns an object containing the top and left coordinates.

    Index: It returns the index position of the element in the set.
    Currentoffset:It returns the current coordinates of the selected element.


Example -1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        var x = $("p").offset();  
        alert("Top: " + x.top + " Left: " + x.left);  
    });  
});  
</script>  
</head>  
<body>  
<p>This is a Paragraph</p>  
<button>Click here to return the offset coordinates of the p element</button>  
</body>  
</html>  


Example - 2

<html>  
<head>  
<script type="text/javascript" src="js/jquery-3.5.1.min.js"></script>  

<script type="text/javascript">  

$(document).ready(function() 
{  
$("div").click(function() 
{  
var offset=$(this).offset();  
$("#lresult").html("Left offset: <span>" +offset.left+"</span>.");  
$("#tresult").html("Top offset: <span>" + offset.top + "</span>.");  
});  
});  
</script>  
<style>  
div
{ 
width:60px; 
height:60px; 
margin:5px; 
float:left;
}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="lresult"> </span>  
<span id="tresult"> </span>  

<div  style="background-color:#7fffd4"> </div>  
<div  style="background-color:#a52a2a"> </div>  
<div  style="background-color:#7fff00"> </div>  
<div  style="background-color:#ff1493"> </div>  
</body>  
</html>  


31) jQuery position()
---------------------
This method makes you able to retrieve the current position of an element relative to the parent element. It returns the position of the first matched element. This method returns the object with two properties: top and left position in pixels.

The jQuery position() method is different from jQuery offset() method because the position() method retrieves the current position of an element relative to the parent element while the offset() method retrieves the current position relative to the document.

The position() method is more useful when you want to position a new element near another one within the same containing DOM element.

Syntax:

    $(selector).position()   


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
$("button").click(function()
{  
 var x=$("p").position();  
 alert("Top position: " + x.top + " Left position: " + x.left);  
});  
});  
</script>  
</head>  
<body>  
<p>This is a Paragraph</p>  
<button>Click here to return the offset coordinates of the p element</button>  
</body>  
</html>  



32) jQuery addClass()
----------------------
The addclass() method is used to add one or more class name to the selected element.

If you want to add more than one class separate the class names with spaces.

Syntax:

    $(selector).addClass(classname,function(index,oldclass))   


Classname 	It is a mandatory parameter. It specifies one or more class names which you want to add.
Function (index, currentclass) 	It is an optional parameter. It specifies a function that returns one or more class names to be added.

    Index: It is used to provide the index position of the element in the set.
    Currentclass: It is used to return the current class name of the selected element.


Example - 1

<html>  
<head>  
<style>  
.intro 
{  
 font-size: 200%;  
 color: red;  
 font-family:verdana;
}  
</style> 

<script src="jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p:first").addClass("intro");  
 });  
});  
</script>  
 
</head>  
<body>  
<h1>This is a heading</h1>  

<p>This is a paragraph.</p>  
<p>This is another paragraph.</p>

<button>Add a class name to the first p element</button>  
</body>  
</html>  


33) jQuery hasClass()
---------------------
This method is used to check whether selected elements have specified class name or not. It returns TRUE if the specified class is present in any of the selected elements otherwise it returns FALSE.

Syntax:

    $(selector).hasClass(classname)   

Example - 1

<html>  
<head>  
<style>  
.intro 
{  
 font-size: 150%;  
 color: Blue;  
}  
</style>  

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert($("p").hasClass("intro"));  
 });  
});  
</script>  

</head>  
<body>  
<h1>This is a heading.</h1>  
<p class="intro">This is a paragraph. </p>  
<p>This is also a paragraph.</p>  
<button>Click here to check if any p element have an "intro" class?</button> 
</body>  
</html>  


Example - 2

<html>  
<head>  
<title>The Selecter Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js">  
</script>  
<script type="text/javascript" language="javascript">  
$(document).ready(function() {  
$("#result1").text( $("p#pid1").hasClass("red") );  
$("#result2").text( $("p#pid2").hasClass("red") );  
});  
</script>  
<style>  
.red { color:red; }  
.blue { color:blue; }  
</style>  
</head>  
<body>  
<p class="red" id="pid1">This is first paragraph.</p>  
<p class="blue" id="pid2">This is second paragraph.</p>  
<div id="result1"></div>  
<div id="result2"></div>  
</body>  
</html>  

Example - 3

<html>  
<head>  
<title>The Selecter Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js">  
</script>  
<script type="text/javascript" language="javascript">  
$(document).ready(function() {  
$("#result1").text( $("p#pid1").hasClass("red") );  
$("#result2").text( $("p#pid2").hasClass("blue") );  
});  
</script>  
<style>  
.red { color:red; }  
.blue { color:blue; }  
</style>  
</head>  
<body>  
<p class="red" id="pid1">This is first paragraph.</p>  
<p class="blue" id="pid2">This is second paragraph.</p>  
<div id="result1"></div>  
<div id="result2"></div>  
</body>  
</html>  

Example - 4

<html>  
 <head>   
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>  
  <script>  
  $(document).ready(function() {     
   $(".btn").click(function(){   
    var className = $(this).attr("id");  
    $("ul li").each(function() {       
     if ($(this).hasClass(className)) {  
      $(this).fadeTo('slow', 0.0).fadeTo('slow', 1.0);        
     }  
    });      
   });   
  });  
  </script>     
  <style>  
  ul{  
   font-family: monospace;  
   font-size: 15px;  
   font-family: monospace;   
   font-style: normal;  
   font-size-adjust: none;  
   width:200px;     
   padding:0px;   
  }  
     
  ul li{  
   background-color:#7fffd4;  
   width:100px;  
   margin:5px;  
   padding:5px;  
   list-style-type:none;  
   width:200px;  
  }  
  </style>  
 </head>  
 <body>  
 <h1>jQuery .hasClass() function Example</h1>     
 <ul>  
  <li class="red">Red</li>    
  <li class="green">Green</li>       
  <li class="green red">Green Red</li>  
  <li class="blue">Blue</li>  
 </ul>   
 <input type="button" class="btn" value="Red Class" id="red">  
 <input type="button" class="btn" value="Green Class" id="green">  
 <input type="button" class="btn" value="Blue Class" id="blue">  
 <input type="button" class="btn" value="No Matching Class" id="noclass">   
 </body>  
</html>  


34) jQuery toggleClass()
------------------------
This method is used to add or remove one or more classes from the selected elements. This method toggles between adding and removing one or more class name. It checks each element for the specified class names. If the class name is already set, it removes and if the class name is missing, it adds.

In this way, it creates the toggle effect. It also facilitates you to specify to only add or only remove by the use of switch parameter.

Syntax:

    $(selector).toggleClass(classname)



    $(selector).toggleClass(classname,function(index,currentclass),switch)  

classname 	It is a mandatory parameter. It specifies one or more class name to add or remove. If you use several classes then separate them by space.
function (index, currentclass) 	It is an optional parameter. It specifies one or more class names that you want to add or remove.

    Index: It provides the index position of the element in the set.
    Currentclass: It provides the current class name of the selected element.

switch 	It is also an optional parameter. It is a Boolean value which specifies whether the class should be added (true) or removed (false).


Example - 1

<html>  
<head>  
<style>
.main 
{  
 font-size: 30px;  
 color: red;  
 font-family:verdana;
}  
</style>

<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("p").toggleClass("main");  
 });  
});  
</script>  

</head>  
<body>  
<button>Toggle class "main" for p 
elements </button>  

<br><br>

<p>Paragraph-1 </p>  
<p>Paragraph-2</p>  
</body>  
</html>  


35) jQuery width()
------------------
jQuery width() method is used to return or set the width of matched element.

To return width: When this method is used to return the width, it returns the width of first matched element.

To set width:When this method is used to set the width, it sets the width for every matched element.

This method is one of a jQuery dimension.

List of jQuery dimension:

    width()
    height()
    innerWidth()
    innerHeight()
    outerWidth()
    outerHeight()

Syntax:

To return the width:     $(selector).width()  

To set the width:     $(selector).width(value)   

To set the width using a function:    $(selector).width(function(index,currentwidth))   

Value 	It is a mandatory parameter. It is used for setting width. It specifies the width in px, em, pt etc. The default value of jQuery width() method is px.
Function(index, currentwidth) 	It is an optional parameter. It specifies a function that provides the new width of selected element.

    Index:IIt provides the index position of the element in the set.
    currentwidth:It provides the current width of the selected element.


Example - 1

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert("Width of div: "+ $("div").width());  
 });  
});  
</script>  
</head>

<body>  
<div style="height:100px;width:200px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"> </div><br>  
<button>Execute the jQuery width() method to return width</button>  
</body>  
</html>  


Example - 2

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>width demo</title>  
  <style>  
  div {  
    width: 100px;  
    height: 80px;  
    float: left;  
    margin: 5px;  
    background:orange;  
    cursor: pointer;  
  }  
  .mod {  
    background: green;  
    cursor: default;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modWidth = 70;  
$( "div" ).one( "click", function() {  
  $( this ).width( modWidth ).addClass( "mod" );  
  modWidth -= 10;  
});  
</script>  
</body>  
</html>  


36) jQuery height()
-------------------
The jQuery height() method is used to return the current computed height for the first element or set the height of every matched element. In other words, you can say that the height() method is used for two purposes:

To return height: When this method is used to return height, it returns the height of first matched element.

To set height: When this method is used to set height, it sets height of all matched elements.

This method is a very common jQuery dimension.
The before() and insertBefore() both methods are used to perform same task. The main difference between them is in syntax, and the placement of the content and the target.

To return the height:

    $(selector).height()   

To set the height:

    $(selector).height(value)  

To set the height by using a function:

    $(selector).height(function(index,currentheight))  

Value 	This is a mandatory parameter. It specifies the height in px, em, pt, etc. its defauly unit is px.
Function (index, currentHeight) 	This is an optional parameter. This is used to specify a function that returns the new height of the selected element.

    Index:It provides the index position of the element in the set.
    currentHeight: It provides the current height of the selected element.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Height of div: " + $("div").height());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:200px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"><div class="div">Hello Guys!<br/> This is jQuery</div></div><br>  
<button>Display the height of div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>height demo</title>  
  <style>  
  div {  
    width: 50px;  
    height: 100px;  
    float: left;  
    margin: 5px;  
    background: rgb(255,140,0);  
    cursor: pointer;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div></div>  
<div></div>  
<div></div>  
<div></div>  
<div></div>  
<script>  
$( "div" ).one( "click", function() {  
  $( this ).height( 50 ).css({  
    cursor: "auto",  
    backgroundColor: "green"  
  });  
});  
</script>  
</body>  
</html>  


37) jQuery innerWidth()
-----------------------
jQuery innerWidth() method is used to return the inner width of the first matched
element without including border and margin.

This method includes padding but excludes border and margin.

This image explains that jQuery innerWidth () method includes padding but not border and margin.

Syntax:

    $(selector).innerWidth()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  alert("Inner width of div is: "+ $("div").innerWidth());  
 });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the inner width of the div</button>  
</body>  
</html>  


<html>  
   <head>  
      <title>The jQuery Example</title>  
      <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
<script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var color = $(this).css("background-color");  
               var width = $(this).innerWidth();  
               $("#result").html("Inner Width is <span>" + width + "</span>.");  
               $("#result").css({'color': color, 'background-color':'white'});  
            });  
         });  
      </script>  
<style>  
         #div1{ margin:10px;padding:10px; border:2px solid #666; width:60px;}  
         #div2 { margin:15px;padding:15px; border:4px solid #666; width:60px;}  
         #div3 { margin:20px;padding:20px; border:6px solid #666; width:60px;}  
         #div4 { margin:25px;padding:25px; border:8px solid #666; width:60px;}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="result"> </span>  
<div id="div1" style="background-color:orange;"></div>  
<div id="div2" style="background-color:green;"></div>  
<div id="div3" style="background-color:brown;"></div>  
<div id="div4" style="background-color:violet;"></div>  
</body>  
</html>   


38) jQuery innerHeight()

The jQuery innerHeight () method is used to return the inner height of first matched element. It includes padding but not border and margin.

In the above image, you can see that innerHeight () method includes padding but not border and margin.

Syntax:

    $(selector).innerHeight()  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Inner height of the div is: " + $("div").innerHeight());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the inner height of the div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>innerHeight demo</title>  
  <style>  
div {  
  width: 60px;  
  padding: 10px;  
  height: 100px;  
  float: left;  
  margin: 5px;  
  background: orange;  
  cursor: pointer;  
}  
.mod {  
  background: green;  
  cursor: default;  
}  
</style>  
<script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modHeight = 80;  
$( "div" ).one( "click", function() {  
  $( this ).innerHeight( modHeight ).addClass( "mod" );  
  modHeight -= 8;  
});  
</script>  
</body>  
</html>  


39) jQuery outerWidth()
-----------------------
jQuery outerWidth() method is used to return the outer width of the first matched
element with padding and border.

The jQuery outerWidth () method works for both visible and hidden elements.

In the above image, you can see that jQuery outerWidth() method includes border and padding both.

Syntax:

    $(selector).outerWidth(includeMargin)  

includeMargin 	It is an optional parameter. It is a Boolean value which specifies whether to include the margin or not.

    False:It is a default value. It specifies that not to include margin.
    True:It specifies that include the margin.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Outer width of div is: " + $("div").outerWidth());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the outer width of the div</button>  
</body>  
</html>  


<html>  
   <head>  
      <title>The jQuery Example</title>  
      <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
          
      <script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var color = $(this).css("background-color");  
               var width = $(this).outerWidth( true );  
               $("#result").html("Outer Width is <span>" + width + "</span>.");  
               $("#result").css({'color': color, 'background-color':'white'});  
            });  
         });  
      </script>  
<style>  
         #div1{ margin:10px;padding:10px; border:2px solid #666; width:60px;}  
         #div2 { margin:15px;padding:15px; border:4px solid #666; width:60px;}  
         #div3 { margin:20px;padding:20px; border:6px solid #666; width:60px;}  
         #div4 { margin:25px;padding:25px; border:8px solid #666; width:60px;}  
</style>  
</head>  
<body>  
<p>Click on any square:</p>  
<span id="result"> </span>  
<div id="div1" style="background-color:orange;"></div>  
<div id="div2" style="background-color:green;"></div>  
<div id="div3" style="background-color:brown;"></div>  
<div id="div4" style="background-color:violet;"></div>  
</body>  
</html>  


40) jQuery outerHeight()
------------------------
The jQuery outerHeight () method is used to return the outer height of first matched element. This method includes padding and border both.

In the above example, you can see that border and padding both are included in the outerHeight() method.

Syntax:

    $(selector).outerHeight(includeMargin)  


includeMargin 	This is a Boolean value which specifies whether to include the margin or not.

    False:It specifies that: Not to include the margin. It is a default value.
    True:It specifies that: Include the margin.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("button").click(function(){  
        alert("Outer height of the div is: " + $("div").outerHeight());  
    });  
});  
</script>  
</head>  
<body>  
<div style="height:100px;width:500px;padding:10px;margin:3px;border:1px solid blue;background-color:lightpink;"></div><br>  
<button>Click here to get the outer height of the div</button>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>outerHeight demo</title>  
  <style>  
  div {  
    width: 60px;  
    padding: 10px;  
    height: 100px;  
    float: left;  
    margin: 5px;  
    background: Orange;  
    cursor: pointer;  
  }  
  .mod {  
    background: green;  
    cursor: default;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<div>A</div>  
<div>B</div>  
<div>C</div>  
<div>D</div>  
<div>E</div>  
<script>  
var modHeight = 80;  
$( "div" ).one( "click", function() {  
  $( this ).outerHeight( modHeight ).addClass( "mod" );  
  modHeight -= 8;  
});  
</script>  
</body>  
</html>  


41) jQuery wrap()
-----------------
This method is used to wrap specified HTML elements around each selected element. The wrap () function can accept any string or object that could be passed through the $() factory function.

Syntax:

     $(selector).wrap(wrappingElement)

    $(selector).wrap(wrappingElement,function(index))   

WrappingElement 	It is a mandatory parameter. It specifies what HTML elements to wrap around each selected element. Its possible values are:

    HTML elements
    jQuery objects
    DOM elements

Function(index) 	It is an optional parameter. It specifies a function that returns the wrapping element.

    Index: It provides the index position of the element in the set.


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
   $("p").wrap("<div></div>");  
 });  
});  
</script>  
<style>  
div
{
background-color: pink;
}  
</style>  
</head>  

<body>  
<p>Hello Guys!</p>  
<p>This is jQuery</p>  
<button>Wrap a div element around each p 
element</button>  
</body>  
</html>  


<html>  
<head>  
<title>The jQuery Example</title>  
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>  
<script type="text/javascript" language="javascript">  
         $(document).ready(function() {  
            $("div").click(function () {  
               var content = '<div class="div"></div>';  
               $("#destination").wrap( content );  
            });  
         });  
</script>  
<style>  
.div{ margin:5px;padding:2px; border:2px solid #666; width:60px;}</style>  
</head>  
<body>  
<p>Click on any square to wrap the text:</p>  
<div class="div" id="destination">We are going to wrap this text</div>  
<div class="div" style="background-color:orange;">ONE</div>  
<div class="div" style="background-color:yellow;">TWO</div>  
<div class="div" style="background-color:green;">THREE</div>  
</body>  
</html>  


42) jQuery serialize()
----------------------
jQuery serialize() method is used to create a text string in standard URL-encoded notation. It is used in form controls like <input>, <textarea>, <select> etc. It serializes the form values so that its serialized values can be used in the URL query string while making an AJAX request.

Syntax:

    $ (selector).serialize()   

Example:
 
<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("button").click(function()
 {  
  $("div").text($("form").serialize()); 
 });  
});  
</script>  
</head>  

<body>  
<form action="">  
First name: <input type="text" name="FirstName" value="Sunil">

<br><br>  

Last name: <input type="text" name="LastName" value="Joseph">
<br><br>  
</form> 

<button>Serialize form values</button> 
<br><br>

<div></div>  
</body>  
</html>  


Note: Only successful controls are serialized to the string. It is not possible to serialize the form submitted by a submit button unless the form was submitted using a button. 


jQUERY EVENTS
==============
jQuery events are the actions that can be detected by your web application. They are used to create dynamic web pages. 

Event Categories are: 

(1) Mouse Events
    click,     dblclick,    mouseenter,   mouseleave

(2) Keyboard Events
    keyup,    keydown,    keypress,

(3) Form Events
    submit,    change,    blur,    focus

(4) Document/Window Events
    load,    unload,    scroll,    resize

etc


To assign a click events to all paragraph on a page:

    $("p").click ();  

The next step defines what should happen when the event fires. You must pass a function to the event.

    $("p").click(function(){  
      // action to take place
    });  

1) jQuery click()
-----------------
When you click on an element, the click event occurs and once the click event occurs it execute the click () method or attaches a function to run.

It is used to trigger the click event for the selected elements.

Syntax:

    $(selector).click(function)  


Example - 1

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("p").click(function()
 {  
  alert("This paragraph was clicked.");
 });  
});  
</script>  
</head>  
<body>  
<p>Click on the statement.</p>  
</body>  
</html>  

Example - 2
To hide the current element on the click

<!DOCTYPE html>  
<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{
 $("h1,h2,h3").click(function()
 {  
  $(this).hide();  
 });  
});  
</script>  
</head>  
<body>  
<h1>This heading will disappear if you click on this.</h1>  
<h2>I will also disappear.</h2>  
<h3>Me too.</h3>  
</body>  
</html>  


2) jQuery bind()
----------------
The jQuery bind() event is used to attach one or more event handlers for selected elements.  It specifies a function to run when the event occurs.

Syntax:

    $(selector).bind(event,function) 


    $(selector).bind(event,data,function,map)   

Event 	It is a mandatory parameter. It specifies one or more events to attach to the elements. If you want to add multiple events they they must be separated by space.

Data 	It is an optional parameter. It specifies additional data to pass along to the function.

Function 	It is a mandatory parameter. It executes the function to run when the event occurs.

Map 	It specifies an event map which contains one or more events or functions attached to the element.

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  

<script>  
$(document).ready(function()
{  
 $("p").bind('click',function()
 {  
  alert("This paragraph was clicked."); 
 });  
});  
</script>  
</head>  
<body>  
<p>Click on the statement.</p>  
</body>  
</html>  

Advantages of jQuery bind() event

> It is compatible on various browsers.
> It is quite easy and quick to bind event handlers.
> It provides some shorthand and easy methods with click(), hover() etc. events for binding event handlers.

jQuery bind() example with mouseenter() and mouseleave() events

<html>  
<head>  
<style> 
*
{
 font-family:verdana;
 font-size:25px;
}
p 
{  
 background: yellow;  
 font-weight: bold;  
 cursor: pointer;  
 padding: 5px;  
}  
.over 
{  
 background: #ccc;  
}  
span 
{  
 color: red;  
}  
</style>  
<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p>Click or double click on the statement.</p>  
<span></span>

<script>  
$('p').bind('click',function(event) 
{  
 var str="("+event.pageX+", "+ event.pageY+")";  
 $("span").text("This is a single click "+str);  
});  

$('p').bind('dblclick',function() 
{  
 $("span").text( "This is a double click on " +this.nodeName );  
});  

$('p').bind('mouseenter mouseleave', 
function(event)
{  
 $(this).toggleClass("over");  
});  
</script>  
</body>  
</html>  


3) jQuery blur()
----------------
The jQuery blur event occurs when element loses focus. It can be generated by via keyboard commands like tab key or mouse click anywhere on the page.

Originally, this event was used only with form elements like <input>. In latest browsers, it has been extended to include all element types.

The blur () method is often used together with focus () method.

Syntax:

    $(selector).blur(function)  


Function 	It is an optional parameter. It is used to specify the function to run when the element loses the focus (blur).

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
<script>  
$(document).ready(function()
{  
 $("input").blur(function()
 {  
  alert("This text box has lost its focus.");  
 });  
});  
</script>  
</head>  
<body>  
Enter your name: <input type="text">  
</body>  
</html>  


4) jQuery focus()
-----------------
The jQuery focus event occurs when an element gains focus. It is generated by a mouse click or by navigating to it using keyboard.

The focus method is often used together with blur () method.

Syntax:

    $(selector).focus()  
    $(selector).focus(function)  

Example - 1

<html>  
<head>  
<style>  
*
{
 font-family:verdana;
 font-size:20px;
}
span 
{  
 display: none; 
 color:red;
}  
</style>  
<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p><input type="text"><span>Write your name.</span></p>  

<p><input type="password"> <span>Write your password.</span></p> 

<script>  
$('input').focus(function() 
{  
 $(this).next('span').css('display', 'inline').fadeOut(3000);  
});  
</script>  
</body>  
</html>  



Example -2

<html>  
<head>  
<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p><input type="text" value="you can't 
write"></p>  

<p><input type="password"> </p> 

<script>  
$("input[type=text]").focus(function() 
{  
 $(this).blur();  
});  
</script>  
 </body>  
</html>  
--------------------------------------------



    <!-- Click Event -->
    <h2>Click Event</h2>
    <button class="btn btn-primary" id="btn-1">Register</button>

    <!-- DBL Click -->
    <h2>DBL Click</h2>
    <button class="btn btn-danger" id="btn-2">Login</button>

    <!-- Toggle Effect -->
    <h2>Toggle Effect</h2>
    <button class="btn btn-primary" id="btn-3">register</button>



// Click Event
$('#btn-1').click(function() {
    $(this).removeClass('btn-primary').addClass('btn-danger').text('Login');
});

// DBL Click Event
$('#btn-2').dblclick(function() {
    $(this).removeClass('btn-danger').addClass('btn-primary').text('Register');
});

// toggle effect
$('#btn-3').click(function() {
    if($(this).text() === 'register'){
        $(this).removeClass('btn-primary').addClass('btn-danger').text('login');
    }
    else{
        $(this).removeClass('btn-danger').addClass('btn-primary').text('register');
    }
});

// Keyup event
$('#input-1').keyup(function() {
    $('#display-1').text($(this).val());
});

// Change Event
$('#select-1').change(function() {
    $('#display-2').text($(this).val());
});


--------------------------------------------

5) jQuery select()
------------------
jQuery select event occurs when a text is marked or selected in text area or a text field. 
This event is limited to <input type="text"> fields and <textarea> boxes. When the select event occurs, the select() method attaches a function to run.

Syntax:

    $(selector).select()  
    $(selector).select(function)  


<html lang="en">  
<head>  
<style> 
*
{
 font-family:verdana;
 font-size:20px
}
p 
{  
 color: red;  
}  
div 
{  
 color: blue;  
}  
</style>  

<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p>Select the text on the box: click and drag the mouse to select text.</p>  
<input type="text" value="Sunil">  
<input type="text" value="Joseph">  
<div></div>  

<script>  
$(':input').select(function() 
{  
 $('div').text('Some text was selected').show().fadeOut(3000);  
});  
</script>  
</body>  
</html>  


6) jQuery change()
------------------
jQuery change event occurs when the value of an element is changed. It works only on form fields. When the change event occurs, the change () method attaches a function with it to run.

Note: This event is limited to <input> elements, <textarea> boxes and <select> elements.

    For select boxes, checkboxes, and radio buttons: The event is fired immediately when the user makes a selection with the mouse.
    For the other element types: The event is occurred when the field loses focus.

Syntax:

    $(selector).change()  
    $(selector).change(function)  

Example - 1

<html>    
<head>    
<style>  
*
{
 font-size: 22px;
}
div 
{    
 color: red;    
}    
</style>    
<script src="jquery-3.5.1.min.js"> </script>    
</head>    

<body>  
Select a Number : 
<select id="se">    
<option>One</option>    
<option selected="selected">Two</option> <option>Three</option>    
<option>Four</option>    
<option>Five</option>    
<option>Six</option>    
</select>    

<div id="loc"></div>    

<script>    
$("select").change(function() 
{    
document.getElementById("loc").innerHTML="You selected: "+ document.getElementById("se").value;  
});  
</script>    
</body>    
</html>    


Example - 2

<html>  
<head>  
<style>
*
{
 font-family:verdana;
 font-size:25px;
}
div 
{  
 color: red;  
}  
</style>  

<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<select name="numbers" multiple>  
<option>One</option>  
<option selected="selected">Two</option> <option>Three</option>  
<option selected="selected"> Four </option>  
<option>Five</option>  
<option>Six</option>  
</select>  
<div></div> 

<script>  
$("select").change(function() 
{  
 var str="";  
 $("select option:selected").each(function() 
 {  
  str=str+$(this).text()+" ";  
 });  
 $( "div" ).text( str );  
}).change();  
</script>  
</body>  
</html>  


7) jQuery submit()
------------------
jQuery submit event is sent to the element when the user attempts to submit a form (clicks on submit button).

This event is only attached to the <form> element. Forms can be submitted either by clicking on the submit button or by pressing the enter button on the keyboard when that certain form elements have focus. When the submit event occurs, the submit() method attaches a function with it to run.

Syntax:

    $(selector).submit()  
    $(selector).submit(function)  

<html>  
<head>  
<style>  
p 
{  
 margin: 0;  
 color: blue;  
}  
div,p 
{  
 margin-left: 10px;  
}  
span 
{  
 color: red;  
}  
</style>  

<script src="jquery-3.5.1.min.js"> </script>  
</head>  

<body>  
<p>Type 'Sunil' to submit this form finally.</p>  

<form action="javascript:alert('success!' );">  
 <div>  
  <input type="text">  
  <input type="submit">  
 </div>  
</form>  

<span></span>  

<script>  
$("form").submit(function(event)
{  
 if($("input:first").val()==="Sunil") 
 {  
  $("span").text( "Submitted Successfully.").show();  
  return;  
 }  
 $("span").text("Not valid!").show().fadeOut(2000 );  
 event.preventDefault();  
});  
</script>  
</body>  
</html>  


8) jQuery keydown()

When you press a key on the keyboard, the keydown() event is occurred and once the keydown() event is occurred, it executes the function associated with keydown() method to run.

The keydown() event is generally used with two other events.

    Keypress() event: It specifies that the key is pressed down.
    Keyup() event: It specifies that the key is released.

Syntax:

    $(selector).keydown()  

It triggers the keydown event for selected elements.

    $(selector).keydown(function)  


<html>  
<head>  
<script src="jquery-3.5.1min.js"></script>  
<script>  
$(document).ready(function(){  
    $("input").keydown(function(){  
        $("input").css("background-color", "green");  
    });  
    $("input").keyup(function(){  
        $("input").css("background-color", "violet");  
    });  
});  
</script>  
</head>  
<body>  
Write something: <input type="text">  
</body>  
</html>   


jQuery keypress()

The jQuery keypress () event is occurred when a keyboard button is pressed down. This event is similar to keydown() event. The keypress() method is executed or attach a function to run when a keypress() event occurs.

Syntax:

    $(selector).keypress()  

It triggers the keypress event for selected elements.

    $(selector).keypress(function)  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
i = 0;  
$(document).ready(function(){  
    $("input").keypress(function(){  
        $("span").text (i += 1);  
    });  
});  
</script>  
</head>  
<body>  
Write something: <input type="text">  
<p>Keypresses: <span>0</span></p>  
</body>  
</html>  


jQuery keyup()

The jQuery keyup() event occurs when a keyboard button is released after pressing. This method is executed or attach a function to run when a keyup() event occurs.

Syntax:

    $(selector).keyup()  

It triggers the keyup event for selected elements.

    $(selector).keyup(function)  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("input").keydown(function(){  
        $("input").css("background-color", "red");  
    });  
    $("input").keyup(function(){  
        $("input").css("background-color", "yellow");  
    });  
});  
</script>  
</head>  
<body>  
Write something: <input type="text">  
</body>  
</html>   


jQuery mouseenter()

The mouseenter() method adds an event handler function to an HTML element. This function is executed, when the mouse pointer enters the HTML element.

When you enter your mouse cursor over the selected element, it triggers the mouseenter event and once the mouseenter event is occurred, it executes the mouseenter() method to attach the event handler function to run.

This event is generally used together with mouseleave() event.

Syntax:

    $(selector).mouseenter()  

It triggers the mouseenter event for selected elements.

    $(selector).mouseenter(function)  


<html>    
<head>    
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#h1").mouseenter(function(){    
       $( "div" ).text( "Mouse entered on heading" ).show().fadeOut( 2000 );   
    });    
});    
</script>    
</head>    
<body>    
<h1 id="h1">Enter this heading.</h1>   
<div></div>   
</body>    
</html>    


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mouseenter(function(){  
        $("p").css("background-color", "lightgreen");  
    });  
    $("p").mouseleave(function(){  
        $("p").css("background-color", "yellow");  
    });  
});  
</script>  
</head>  
<body>  
<p>Move your mouse cursor over this statement.</p>  
</body>  
</html>  


jQuery mouseleave()

The mouseleave() method adds an event handler function to an HTML element. This function is executed, when the mouse pointer leaves the HTML element.

When your mouse cursor leaves the selected element, it triggers the mouseleave event and once the mouseleave event is occurred, it executes the mouseleave() method attached with the event handler function to run.

This event is generally used together with mouseenter() event.

Syntax:

    $(selector).mouseleave()  

It triggers the mouseleave event for selected elements.

    $(selector).mouseleave(function)  


<html>    
<head>    
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#h1").mouseleave(function(){    
       $( "div" ).text( "Bye Bye... leaving heading" ).show().fadeOut( 2000 );   
    });    
});    
</script>    
</head>    
<body>    
<h1 id="h1">Enter this heading.</h1>   
<div></div>   
</body>    
</html>    


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mouseenter(function(){  
        $("p").css("background-color", "red");  
    });  
    $("p").mouseleave(function(){  
        $("p").css("background-color", "blue");  
    });  
});  
</script>  
</head>  
<body>  
<p>Move your mouse cursor over this statement.</p>  
</body>  
</html>  
    

jQuery hover()

The jQuery hover() method executes two functions when you roam the mouse pointer over the selected element. The hover() method triggers both the mouseenter and mouseleave events.

Syntax:

    $(selector).hover(inFunction,outFunction)   


InFunction	It is a mandatory parameter. It is executed the function when mouseenter event occurs.
OutFunction	It is an optional parameter. It is executed the function when mouseleave event occurs. 

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").hover(function(){  
        $(this).css("background-color", "violet");  
        }, function(){  
        $(this).css("background-color", "green");  
    });  
});  
</script>  
</head>  
<body>  
<p>Hover your mouse pointer on me!</p>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>hover demo</title>  
  <style>  
  ul {  
    margin-left: 20px;  
    color: black;  
  }  
  li {  
    cursor: default;  
  }  
  span {  
    color: red;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<ul>  
  <li>Java</li>  
  <li>SQL</li>  
  <li class="fade">Android</li>  
  <li class="fade">php</li>  
</ul>  
<script>  
$( "li" ).hover(  
  function() {  
    $( this ).append( $( "<span> ***</span>" ) );  
  }, function() {  
    $( this ).find( "span:last" ).remove();  
  }  
);  
$( "li.fade" ).hover(function() {  
  $( this ).fadeOut( 100 );  
  $( this ).fadeIn( 500 );  
});  
</script>  
</body>  
</html>  


jQuery mousedown()

The mousedown() method adds an event handler function to an HTML element. This function is executed, when the left mouse button is pressed down, at the time while the mouse is over the HTML element.

This event is generally used together with mouseup() event.

Syntax:

    $(selector).mousedown()  

It triggers the mousedown event for selected elements.

    $(selector).mousedown(function)  


<html>    
<head>    
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#h1").mousedown(function(){    
       $( "div" ).text( "mouse down event triggered" ).show().fadeOut( 2000 );   
    });    
});    
</script>    
</head>    
<body>    
<h1 id="h1">Enter this heading.</h1>   
<div></div>   
</body>    
</html>    

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mousedown(function(){  
        $("p").css("background-color", "blue");  
    });  
    $("p").mouseup(function(){  
        $("p").css("background-color", "lightyellow");  
    });  
});  
</script>  
</head>  
<body>  
<p>Press down the mouse left button over this p element</p>  
</body>  
</html>  


jQuery mouseup()

The mouseup() method adds an event handler function to an HTML element. This function is executed, when the left mouse button is released after pressing mouse button on the HTML element.

The mouseup () event occurs when you release the pressed button of your mouse over a selected element. Once the mouseup() event is occurred it executes the mouseup() method attached with a function to run.

This event is generally used together with mousedown() event.

Syntax:

    $(selector).mouseup()  

It triggers the mouseup event for selected elements.

    $(selector).mouseup(function)  


<html>    
<head>    
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>    
<script>    
$(document).ready(function(){    
    $("#h1").mouseup(function(){    
       $( "div" ).text( "Bye Bye... mouse up event triggered" ).show().fadeOut( 2000 );   
    });    
});    
</script>    
</head>    
<body>    
<h1 id="h1">Enter this heading.</h1>   
<div></div>   
</body>    
</html>    


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mousedown(function(){  
        $("p").css("background-color", "pink");  
    });  
    $("p").mouseup(function(){  
        $("p").css("background-color", "yellowgreen");  
    });  
});  
</script>  
</head>  
<body>  
<p>Press down and release the mouse left button over this div element</p>  
</body>  
</html>  
    

jQuery mouseover()

The mouseover event is occurred when you put your mouse cursor over the selected element .Once the mouseover event is occurred, it executes the mouseover () method or attach a function to run.

This event is generally used with mouseout() event.

Note: Most of the people are confused between mouseenter and mouseover.
Difference between mouseenter() and mouseover()

The mouseenter event is only triggered if the mouse pointer enters the selected element whereas the mouseover event triggers if the mouse cursor enters any child elements as well as the selected element.

Syntax:

    $(selector).mouseover()  

It triggers the mouseover event for selected elements.

    $(selector).mouseover(function)  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mouseover(function(){  
        $("p").css("background-color", "lightgreen");  
    });  
    $("p").mouseout(function(){  
        $("p").css("background-color", "orange");  
      });  
});  
</script>  
</head>  
<body>  
<p>Move your cursor over this paragraph.</p>  
</body>  
</html>  

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>mouseover demo</title>  
  <style>  
  div.out {  
    width: 40%;  
    height: 120px;  
    margin: 0 15px;  
    background-color: lightgreen;  
  }  
  div.in {  
    width: 60%;  
    height: 60%;  
    background-color: red;  
    margin: 10px auto;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
 <div class="out">  
  <span style="padding:20px">move your mouse</span>  
  <div class="in"></div>  
</div>  
<script>  
$( "div.out" )  
  .mouseover(function() {  
    $( this ).find( "span" ).text( "mouse over " );  
  })  
  .mouseout(function() {  
    $( this ).find( "span" ).text( "mouse out " );  
  });  
</script>  
</body>  
</html>  


jQuery mouseout()

The mouseout event is occurred when you remove your mouse cursor from the selected element .Once the mouseout event is occurred, it executes the mouseout() method or attach a function to run.

This event is generally used with mouseover () event.

Note: Most of the people are confused between mouseout and mouseleave.
Difference between mouseleave and mouseout

The mouseleave event is only triggered if the mouse pointer leaves the selected element whereas the mouseout event triggers if the mouse cursor leaves any child elements as well as the selected element.

Syntax:

    $(selector).mouseout()  

It triggers the mouseout event for selected elements.

    $(selector).mouseout(function)  

<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("p").mouseover(function(){  
        $("p").css("background-color", "lightgreen");  
    });  
    $("p").mouseout(function(){  
        $("p").css("background-color", "orange");  
      });  
});  
</script>  
</head>  
<body>  
<p>Move your cursor over this paragraph.</p>  
</body>  
</html>  


<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>mouseover demo</title>  
  <style>  
  div.out {  
    width: 40%;  
    height: 120px;  
    margin: 0 15px;  
    background-color: lightgreen;  
  }  
  div.in {  
    width: 60%;  
    height: 60%;  
    background-color: red;  
    margin: 10px auto;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
 <div class="out">  
  <span style="padding:20px">move your mouse</span>  
  <div class="in"></div>  
</div>  
<script>  
$( "div.out" )  
  .mouseover(function() {  
    $( this ).find( "span" ).text( "mouse over " );  
  })  
  .mouseout(function() {  
    $( this ).find( "span" ).text( "mouse out " );  
  });  
</script>  
</body>  
</html>  


jQuery load()

The load () method is used to load a specific element. It attaches an event handler to load event. It was deprecated in jQuery 1.8 version of jQuery library.

The load event occurs when a specific element is loaded. It is generally used with a URL (image, script, frame, iframe), and the window object.

Note: On some browsers, the load event did not trigger if the image is cached.

Syntax:

    $(selector).load(function)  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $("img").load(function(){  
        alert("Image loaded.");  
    });  
});  
</script>  
</head>  
<body>  
<img src="good-morning.jpg" alt="good morning">  
<p><b>Note:</b> On some browsers, the load event did not trigger if the image is cached.</p>  
</body>  
</html>   


jQuery unload()

The jQuery unload() method is used to unload a specific element. It attaches an event handler to unload event. The unload event is sent to the window element when the user navigates away from the page. It was deprecated in jQuery 1.8 version of jQuery library.
Ways to trigger unload event

An unload event is triggered if you:

    Click on a link which leads to leave the page.
    Use the forward or back button.
    Type a new URL in the address bar.
    Close the browser window.
    Reload the page.

Syntax:

    $(selector).unload(function)  


<html>  
<head>  
<script src="js/jquery-3.5.1.min.js"></script>  
<script>  
$(document).ready(function(){  
    $(window).unload(function(){  
        alert("Goodbye!");  
    });  
});  
</script>  
</head>  
<body>  
<p>When you click <a href="http://www.google.com/">this link</a>, or close the window,  
 unload event will be triggered.</p>  
</body>  
</html>  


jQuery delegate()

The delegate () method is used to attach one or more event handlers for specified elements which are the children of selected elements. This method executes a function to run when the event occurs.

The attached event handlers with the delegate () method works for both current and future elements.

Syntax:

    $(selector).delegate(childSelector,event,data,function)   


ChildSelector 	It is a mandatory parameter that is used to specify one or more child elements to attach the event handler.
Event 	It is also a mandatory parameter. It specifies one or more events to attach to the elements. If you use multiple events then they must be separated by space.
Data 	It is optional and specifies additional data to pass along to the function.
Function 	It is executed when the event occurs.

<html lang="en">  
<head>  
  <meta charset="utf-8">  
  <title>delegate demo</title>  
  <style>  
  p {  
    background: yellow;  
    font-weight: bold;  
    cursor: pointer;  
    padding: 5px;  
  }  
  p.over {  
    background: #ccc;  
  }  
  span {  
    color: red;  
  }  
  </style>  
  <script src="js/jquery-3.5.1.min.js"></script>  
</head>  
<body>  
<p>This is a single paragraph. Click me for next.</p>  
<script>  
$( "body" ).delegate( "p", "click", function() {  
  $(this ).after( "<p>Click me for another paragraph.</p>" );  
});  
</script>  
</body>  
</html>  

**************************
