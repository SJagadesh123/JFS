Callback Function
=================
Functions are actually first class objects.

Just like passing objects into functions as arguments, a function can also be passed as an argument into functions

A JavaScript Callback Function is a function that is passed as a parameter to another JavaScript function, and the callback function is run inside of the function it was passed into. JavaScript Callback Functions can be used synchronously or asynchronously

function print(callback) {  
    callback();
}

print(welcome)

The print() function takes another function as a parameter and calls it inside. This is valid in JavaScript and we call it a "callback". 
So a function that is passed to another function as a parameter is a callback function. 

JavaScript runs code sequentially in top-down order. However, there are some cases that code runs (or must run) after something else happens and also not sequentially. This is called asynchronous programming.

Callbacks make sure that a function is not going to run before a task is completed but will run right after the task has completed. It helps us develop asynchronous JavaScript code and keeps us safe from problems and errors.

In JavaScript, the way to create a callback function is to pass it as a parameter to another function, and then to call it back right after something has happened or some task is completed.

--------------------------------
Senario:

We want to log a message to the console but it should be there after 3 seconds.

const message = function() {  
    console.log("This message is shown after 3 seconds");
}
 
setTimeout(message, 3000);

There is a built-in method in JavaScript called "setTimeout", which calls a function or evaluates an expression after a given period of time (in milliseconds). So here, the "message" function is being called after 3 seconds have passed. 

In other words, the message function is being called after something happened (after 3 seconds passed for this example), but not before. So the message function is an example of a callback function.


Callback as Anonymous Function::
setTimeout(function() {  
    console.log("This message is shown after 3 seconds");
}, 3000);

Callback as an Arrow Function::
setTimeout(() => { 
    console.log("This message is shown after 3 seconds");
}, 3000);
--------------------------------
callback functions are also used for event declarations in JavaScript

document.queryselector("#callback-btn")
    .addEventListener("click", function() {    
      console.log("User has clicked on the button!");
});

function btnClicked() { 
   // do something here
}
let btn = document.querySelector('#btn');
btn.addEventListener('click',btnClicked);
--------------------------------
Usecase-2
let numbers = [1, 2, 4, 7, 3, 5, 6];
to find all the odd numbers in the array, you can use the filter() method of the Array object

The filter() method creates a new array with the elements that pass the test implemented by a function.

The following test function returns true if a number is an odd number:

function isOddNumber(number) {
    return number % 2;
}

Now, you can pass the isOddNumber() to the filter() method:

const oddNumbers = numbers.filter(isOddNumber);
console.log(oddNumbers); // [ 1, 7, 3, 5 ]

In this example, the isOddNumber is a callback function. When you pass a callback function into another function, you just pass the reference of the function i.e., the function name without the parentheses ()

To make it shorter, you can use an anonymous function as a callback:

let oddNumbers = numbers.filter(function(number) {
    return number % 2;
});
console.log(oddNumbers); // [ 1, 7, 3, 5 ]

In ES6, you can use the arrow functions:

let oddNumbers = numbers.filter(number => number % 2);
--------------------------------
A callback function is executed after the current effect is finished.

Typical syntax: $(selector).hide(speed,callback);

$("button").click(function(){
  $("p").hide("slow", function(){
    alert("The paragraph is now hidden");
  });
}); 

Example without Callback - the alert box will be displayed before the hide effect is completed

$("button").click(function(){
  $("p").hide(1000);
  alert("The paragraph is now hidden");
}); 


--------------------------------
In JavaScript, Callback Functions are just like normal functions but they are passed into other functions to be called a later stage. Typically, once a Callback Function is passed into another function, it is executed after a particular event occurs or change of state.

--------------------------------
let x = function(){
  console.log('I am called from inside a function');
}

let y = function(callback){
  console.log('do something');
  callback();
}

y(x);
--------------------------------

function greeting(name) {
  alert('Hello ' + name);
}

function processUserInput(callback) {
  let name = prompt('Please enter your name.');
  callback(name);
}

processUserInput(greeting);

-----------------------------

Normal case:
let calculate = function(a, b, calcType){
  let result=0;
  if(calType == 'sum')
      result = a+b;
  else if(calType == 'diff')
      result = a-b;
  else
      result = 'Invalid Calculate Operation'
}


console.log(calculate(10,20,'sum'))



let sum = function(a,b){
  return a+b;
}
  if(calType == 'sum')
      result = sum(a,b);



let sum = (a , b) => {
    return a + b;
};

let mul = (a , b) => {
    return a * b;
};

let calculate = (a , b, calc) => {
    return calc(a , b);
};
console.log(calculate(10,20,sum)); // 30
console.log(calculate(10,20,mul)); // 200
console.log(calculate(10,20,(a , b) => { return a - b}));

--------------------------------------
Why do we use callback function in JavaScript?

Callbacks make sure that a function is not going to run before a task is completed but will run right after the task has completed. It helps us develop asynchronous JavaScript code and keeps us safe from problems and errors

function download(url, callback) {
    setTimeout(() => {
        // script to download the picture here
        console.log(`Downloading ${url} ...`);
        // process the picture once it is completed
        callback(url);

    }, 3000);
}

let url = 'https://www.zettamine.com/pic.jpg';
download(url, function(picture) {
    console.log(`Processing ${picture}`);
}); 
--------------------------------------
--------------------------------------
Realtime Use of Callback Functions


<body>
    <table border=1 width=60%>
        <thead>
            <tr>
                <th>EMP ID</th>
                <th>NAME</th>
                <th>AGE</th>
            </tr>
        </thead>
        <tbody id="table-body">

        </tbody>
    </table>
    <script>
        let employees = [
            { id: 101, name: 'Sunil', age: 38 },
            { id: 102, name: 'Harsha', age: 35 }
        ]

        let createEmployee = (employee) =>{
            setTimeout(()=>{
                employees.push(employee)
            },2000)
        }

        let getEmployees = () => {
            setTimeout(()=>{
                let employeeRows = ''
                employees.forEach((employee)=>{
                    employeeRows+=`<tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.age}</td>
                    `
                })

                document.querySelector('#table-body').innerHTML = employeeRows
            },1000)
        }

        
        createEmployee({id:103,name:'Sanjay',age:23})

        getEmployees()
        
    </script>

--------------------------------------
<script>
        let employees = [
            { id: 101, name: 'Sunil', age: 38 },
            { id: 102, name: 'Harsha', age: 35 }
        ]

        let createEmployee = (employee, callback) =>{
            setTimeout(()=>{
                employees.push(employee);
                callback()
            },2000)
        }

        let getEmployees = () => {
            setTimeout(()=>{
                let employeeRows = ''
                employees.forEach((employee)=>{
                    employeeRows+=`<tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.age}</td>
                    `
                })

                document.querySelector('#table-body').innerHTML = employeeRows
            },1000)
        }

        
        createEmployee({id:103,name:'Sanjay',age:23}, getEmployees)        
        
    </script>

-------------------------------
    <script>
        const userLeft = true
        const userWatching = false

        function watchTutorialCallback(callBack, errorCallBack){
            if(userLeft){
                errorCallBack({
                    name: 'User Left',
                    message: ':('
                })
            }
            else if(userWatching){
                errorCallBack({
                    name: 'User watching',
                    message:':)'
                })
            }
            else{
                callBack("Thanks & Subscribe")
            }
        }

        watchTutorialCallback((message)=>{
            console.log('Success Messsage '+message)
        }, (error)=>{
            console.log(error.name+" - "+error.message)
        })
    </script>

======================================

Promises in Java Script
-----------------------
Normal Approach

<script>
    let downloadImage = (resolve, reject)=>{
        //download Image task
        let isDownloaded = false
        if(isDownloaded){
            resolve('Image Downloaded Successfully')
        }
        else{
            reject('Image cannot be downloaded')
        }
    }

    //function call
    downloadImage((message)=>{
        console.log('Yes - '+message)
    },
    (errMsg)=>{
        console.log('No - '+errMsg)
    })
</script>


JavaScript Promise Object - contains both the producing code and calls to the consuming code

Promise Syntax

let myPromise = new Promise(function(myResolve, myReject) {
  // "Producing Code" (May take some time)

  myResolve(); // when successful
  myReject();  // when error
});

// "Consuming Code" (Must wait for a fulfilled Promise)
myPromise.then(
  function(value) { /* code if successful */ },
  function(error) { /* code if some error */ }
);

When the producing code obtains the result, it should call one of the two callbacks: 

When	Success   Call   myResolve(result value)
When    Error	  Call   myReject(error object)

Promise Object Properties

A JavaScript Promise object can be:

    Pending
    Fulfilled
    Rejected

The Promise object supports two properties: state and result.

While a Promise object is "pending" (working), the result is undefined.

When a Promise object is "fulfilled", the result is a value.

When a Promise object is "rejected", the result is an error object.



Promise.then() takes two arguments, a callback for success and another for failure.

Both are optional, so you can add a callback for success or failure only.



Promises are used to handle asynchronous operations in JavaScript. They are easy to manage when dealing with multiple asynchronous operations

The Promise constructor takes a function (an executor) that will be executed immediately and passes in two functions: resolve- which must be called when the Promise is resolved (passing a result), and 
reject - when it is rejected (passing an error).


let promiseObj = new Promise(executor);

executor - a function to be executed by the constructor, during the process of constructing the promiseObj.  The executor is custom code that ties an outcome to a promise. You, the programmer, write the executor.  The signature of this function is expected to be:

function(resolutionFunc, rejectionFunc)
{
    // typically, some asynchronous operation.
} 


Fulfilled - Fulfilled is a state of a Promise. It means that the promise has been resolved and now has its resolved value (using the internal resolve function). The operation represented by the promise has been completed successfully.


Rejected - means that the promise has been rejected and now has its rejected reason (using the internal reject function). The operation represented by the promise failed to obtain a value and thus has a reason for failing to do so (typically an error code or error object, but it can be anything).

Pending -  is the initial promise state. The operation represented by the promise has not yet been fulfilled or rejected.



Actual Promise

<script>
    let downloadImage = new Promise((resolve, reject)=>{
        //download Image task
        let isDownloaded = true
        if(isDownloaded){
            resolve('Image Downloaded Successfully')
        }
        else{
            reject('Image cannot be downloaded')
        }
    })

    downloadImage.then((message)=>{
        console.log("Yes: "+message)
    }).catch((message)=>{
        console.error('No: '+message)
    })
</script>


------------------
let promiseToCleanTheRoom = new Promise(function(resolve,reject){
  //cleaning the room
  let isClean = true;
  if(isClean)
    resolve('Clean')
  else
    reject('Not Clean')
});


promiseToCleanTheRoom.then(function(fromResolve){
   console.log('The room is '+fromResolve)
}).catch(function(fromReject){
   console.log('The room is '+fromReject)
})

-----------------------
    <script>
    let cleanRoom = function(){
        return new Promise(function(resolve, reject){
            resolve('Cleaned the Room')
        })
    };

    let removeGarbage = function(p){
        return new Promise(function(resolve, reject){
            resolve('Remove Garbage')
        })
    }
    
    let winIceCream = function(p){
        return new Promise(function(resolve,reject){
            resolve('Win Icecream')
        })
    }

    cleanRoom().then(function(){
        return removeGarbage()
    }).then(function(){
        return winIceCream()
    }).then(function(){
        console.log('finished')
    })
    </script>
    <script>
        //myFun(test);
    </script>

-----------------------
    <script>
    let cleanRoom = function(){
        return new Promise(function(resolve, reject){
            resolve('Cleaned the Room')
        })
    };

    let removeGarbage = function(message){
        return new Promise(function(resolve, reject){            
            resolve(message+' Remove Garbage')
        })
    }
    
    let winIceCream = function(message){
        return new Promise(function(resolve,reject){            
            resolve(message+' Won Icecream')
        })
    }

    cleanRoom().then(function(result){
        return removeGarbage(result)
    }).then(function(result){
        return winIceCream(result)
    }).then(function(result){
        console.log('finished')
        console.log(result)
    })


        cleanRoom().then((msg)=>{
            console.log(msg)
            return removeGarbage().then((msg)=>{
                console.log(msg)
                return winIceCream().then((msg)=>{
                    console.log(msg)
                })
            })
        })
        .catch((error)=>{
            console.log(error)
        })
    </script>



Promise.all([cleanRoom(),removeGarbage(),winIceCream()]).then(function(){
       console.log('all finished')
   }) 


----------------------

   Promise.race([cleanRoom(),removeGarbage(),winIceCream()]).then(function(){
       console.log('one of them is  finished')
   }) 

--------------------------
const promise1 = new Promise((resolve, reject) => {
  setTimeout(resolve, 500, 'one');
});

const promise2 = new Promise((resolve, reject) => {
  setTimeout(resolve, 100, 'two');
});

Promise.race([promise1, promise2]).then((value) => {
  console.log(value);
  // Both resolve, but promise2 is faster
});
// expected output: "two"

--------------------------

Your mom promises you that she'll get you a new phone next week."

You don't know if you will get that phone until next week. Your mom can either really buy you a brand new phone, or she doesn't, because she is not happy .

That is a promise. A promise has 3 states. They are:

- Pending: You don't know if you will get that phone (initial state, neither fulfilled nor rejected.)
- Fulfilled: Mom is happy, she buys you a brand new phone (meaning that the operation completed successfully.)
- Rejected: Mom is unhappy, she doesn't buy you a phone (meaning that the operation failed.)

resolve & reject

A pending promise can either be fulfilled with a value, or rejected with a reason (error). 

-------------------------------------
let isMomHappy = true;

// Promise
let willIGetNewPhone = new Promise((resolve, reject) => { 
        if(isMomHappy) {
            const phone = {
                brand: 'Apple',
                color: 'Silver'
            };
            resolve(phone);
        } 
	else {
            const reason = new Error('mom is not happy');
            reject(reason);
        }
    }
);


// call our promise
let askMom = function () {
    willIGetNewPhone       
        .then(fulfilled => console.log(fulfilled)) 
        .catch(error => console.log(error.message));
};

askMom();




Chaining Promises
-----------------
Promises are chainable. Dependendent Promises

Let's say, you, the kid, promises your friend that you will show them the new phone when your mom buy you one.

// 2nd promise
const showOff = function (phone) {
    const message = 'Hey friend, I have a new ' +
                phone.color + ' ' + phone.brand + ' phone';
    return Promise.resolve(message);
};

// call our promise
const askMom = function () {
    willIGetNewPhone
        .then(showOff)
        .then(fulfilled => console.log(fulfilled)) 
        .catch(error => console.log(error.message));
};

askMom();


Promises are asynchronous. Let's log a message before and after we call the promise.

// call our promise
var askMom = function () {
    console.log('before asking Mom'); // log before
    willIGetNewPhone
        .then(showOff)
        .then(function (fulfilled) {
            console.log(fulfilled);
        })
        .catch(function (error) {
            console.log(error.message);
        });
    console.log('after asking mom'); // log after
}

-------------------------------------
    <script>
        let employees = [
            { id: 101, name: 'Sunil', age: 38 },
            { id: 102, name: 'Harsha', age: 35 }
        ]

        let createEmployee = (employee) => {
            return new Promise((resolve, reject) => {
            setTimeout(() => {
                employees.push(employee); 
                let isCreated = true
                if(isCreated)
                     resolve()     
                else          
                    reject('Error in adding Employee')     
            }, 2000)
            })
        }

        let getEmployees = () => {
            setTimeout(() => {
                let employeeRows = ''
                employees.forEach((employee) => {
                    employeeRows += `<tr>
                    <td>${employee.id}</td>
                    <td>${employee.name}</td>
                    <td>${employee.age}</td>
                    `
                })

                document.querySelector('#table-body').innerHTML = employeeRows
            }, 1000)
        }


        createEmployee({ id: 103, name: 'Sanjay', age: 23 })
           .then(getEmployees)
           .catch((error)=>{
               console.log(error)
           })

    </script>
-------------------------------------
Dependent Promises

doCourse() 
  => doProject()
    => doTechnicalRound()
       =>doManagerRound()
           =>doHRRound() 
               Get Job / NO JOB

        let doCourse = new Promise((resolve, reject) => {
            //doing course
            let isDone = true
            if (isDone)
                resolve('Course is Completed')
            else
                reject('Course is NOT Completed');
        })


        let doProject = new Promise((resolve, reject) => {
            //doing Project
            let isDone = true
            if (isDone)
                resolve('Project is Completed')
            else
                reject('Project is NOT Completed');
        })

        let doTechnicalRound = new Promise((resolve, reject) => {
            //doing TR
            let isDone = true
            if (isDone)
                resolve('Technical Round is Completed')
            else
                reject('Technical Round is NOT Completed');
        })


        let doManagerRound = new Promise((resolve, reject) => {
            //doing Manager Round
            let isDone = true
            if (isDone)
                resolve('Manager Round is Completed')
            else
                reject('Manager Round is NOT Completed');
        })

        let doHRRound = new Promise((resolve, reject) => {
            //doing HRRound
            let isDone = true
            if (isDone)
                resolve('Got Job')
            else
                reject('Got Rejected');
        })

        doCourse.then((message)=>{
            let output = message
            doProject.then((message)=>{
                 output+='\n'+message
                doTechnicalRound.then((message)=>{
                    output+='\n'+message
                    doTechnicalRound.then((message)=>{
                        output+='\n'+message
                        doHRRound.then((message)=>{
                            output+='\n'+message
                            console.log(output)
                        })
                    })
                })
            })
            .catch(()=>{})
        })
        .catch(()=>{

        })

-------------------------------------

    <script>
        let promise1 = Promise.resolve('Hello World')
        let promise2 = 20
        let promise3 = new Promise((resolve,reject)=>{
            setTimeout(resolve,2000,'Goodbye')
        }) 
        let promise4 = fetch('https://jsonplaceholder.typicode.com/users')
        let promise5 = fetch('https://jsonplaceholder.typicode.com/users').then(res=>res.json())

        Promise.all([promise1,promise2,promise3,promise4,promise5]).then((values)=>console.log(values))
    </script>


fetch
-----
JavaScript can send network requests to the server and load new information whenever it's needed.

For example, we can use a network request to:
    Submit an order,
    Load user information,
    Receive latest updates from the server,
    …etc.

let promise = fetch(url, [options])

    url – the URL to access.
    options – optional parameters: method, headers etc.

let response = await fetch(url);

if (response.ok) { // if HTTP-status is 200-299
  // get the response body (the method explained below)
  let json = await response.json();
} else {
  alert("HTTP-Error: " + response.status);
}

Response provides multiple promise-based methods to access the body in various formats:

    response.text() – read the response and return as text,
    response.json() – parse the response as JSON,
    response.formData() – return the response as FormData object (explained in the next chapter),
    response.blob() – return the response as Blob (binary data with type),
    response.arrayBuffer() – return the response as ArrayBuffer (low-level representaion of binary dat
-----------------------
